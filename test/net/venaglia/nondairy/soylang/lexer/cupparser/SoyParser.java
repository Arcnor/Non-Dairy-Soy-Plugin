
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 23 18:16:27 PST 2012
//----------------------------------------------------

package net.venaglia.nondairy.soylang.lexer.cupparser;

import java_cup.runtime.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.expr.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.tag.*;
import net.venaglia.nondairy.soylang.lexer.*;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 23 18:16:27 PST 2012
  */
public class SoyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SoyParser() {super();}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\100\003\000\002\100\004\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\006\006\000\002\006\007\000\002\006\005" +
    "\000\002\012\004\000\002\012\003\000\002\010\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\011\003\000\002\014" +
    "\005\000\002\014\004\000\002\014\006\000\002\015\006" +
    "\000\002\015\007\000\002\015\006\000\002\015\007\000" +
    "\002\016\005\000\002\023\005\000\002\045\005\000\002" +
    "\055\005\000\002\037\006\000\002\037\007\000\002\037" +
    "\006\000\002\037\007\000\002\024\005\000\002\024\004" +
    "\000\002\024\005\000\002\046\006\000\002\046\005\000" +
    "\002\056\005\000\002\027\004\000\002\027\005\000\002" +
    "\027\004\000\002\027\005\000\002\027\004\000\002\027" +
    "\005\000\002\027\006\000\002\027\005\000\002\033\005" +
    "\000\002\033\004\000\002\033\005\000\002\033\004\000" +
    "\002\032\005\000\002\032\004\000\002\032\005\000\002" +
    "\032\004\000\002\047\006\000\002\047\005\000\002\040" +
    "\006\000\002\040\005\000\002\041\005\000\002\057\005" +
    "\000\002\030\005\000\002\030\004\000\002\030\005\000" +
    "\002\030\004\000\002\030\005\000\002\030\004\000\002" +
    "\030\006\000\002\030\005\000\002\035\005\000\002\035" +
    "\004\000\002\035\005\000\002\035\004\000\002\034\005" +
    "\000\002\034\004\000\002\034\005\000\002\034\004\000" +
    "\002\050\006\000\002\050\005\000\002\060\005\000\002" +
    "\042\006\000\002\042\005\000\002\043\005\000\002\031" +
    "\007\000\002\031\006\000\002\031\006\000\002\031\005" +
    "\000\002\031\005\000\002\031\004\000\002\031\005\000" +
    "\002\051\006\000\002\051\005\000\002\061\005\000\002" +
    "\044\005\000\002\065\005\000\002\025\005\000\002\025" +
    "\004\000\002\025\005\000\002\052\006\000\002\062\005" +
    "\000\002\066\004\000\002\067\007\000\002\036\005\000" +
    "\002\036\004\000\002\036\006\000\002\036\007\000\002" +
    "\036\005\000\002\054\004\000\002\054\007\000\002\054" +
    "\006\000\002\054\006\000\002\054\005\000\002\063\005" +
    "\000\002\070\004\000\002\070\004\000\002\070\003\000" +
    "\002\026\005\000\002\026\004\000\002\026\010\000\002" +
    "\026\006\000\002\026\005\000\002\053\010\000\002\053" +
    "\006\000\002\053\005\000\002\064\005\000\002\071\003" +
    "\000\002\071\004\000\002\072\005\000\002\072\007\000" +
    "\002\073\003\000\002\073\004\000\002\074\003\000\002" +
    "\074\003\000\002\076\006\000\002\102\003\000\002\102" +
    "\005\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\075\004\000\002\021\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\101" +
    "\003\000\002\101\005\000\002\103\003\000\002\103\003" +
    "\000\002\103\006\000\002\103\005\000\002\103\004\000" +
    "\002\103\006\000\002\103\005\000\002\103\003\000\002" +
    "\103\003\000\002\103\004\000\002\103\005\000\002\103" +
    "\005\000\002\103\007\000\002\106\004\000\002\106\003" +
    "\000\002\106\004\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\107\005\000\002\107\004\000\002" +
    "\110\004\000\002\110\004\000\002\110\003\000\002\110" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\104\004\000\002\104\004\000\002\104\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\013\004\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\012\005\010\007\004\014\007\015\006\001" +
    "\002\000\004\047\u0162\001\002\000\016\005\ufff8\007\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\022\ufff8\001\002\000\020\002" +
    "\ufff6\005\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6\022\ufff6" +
    "\001\002\000\020\002\ufff7\005\ufff7\007\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\022\ufff7\001\002\000\020\002\ufff5\005\ufff5" +
    "\007\ufff5\014\ufff5\015\ufff5\016\ufff5\022\ufff5\001\002\000" +
    "\012\005\010\007\004\014\007\015\006\001\002\000\004" +
    "\002\u015d\001\002\000\016\005\010\007\016\014\007\015" +
    "\006\016\020\022\021\001\002\000\004\007\016\001\002" +
    "\000\014\004\116\007\106\011\107\014\121\015\124\001" +
    "\002\000\004\033\037\001\002\000\014\016\035\020\032" +
    "\021\033\022\036\023\034\001\002\000\014\016\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\001\002\000\014\016\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\001\002\000\020\002" +
    "\ufffd\005\010\007\016\014\007\015\006\016\020\022\021" +
    "\001\002\000\020\002\uffe0\005\uffe0\007\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\022\uffe0\001\002\000\020\002\ufffa\005\ufffa" +
    "\007\ufffa\014\ufffa\015\ufffa\016\ufffa\022\ufffa\001\002\000" +
    "\016\005\010\007\016\014\007\015\006\016\020\022\021" +
    "\001\002\000\016\005\ufff9\007\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\022\ufff9\001\002\000\020\002\ufffe\005\010\007\016" +
    "\014\007\015\006\016\020\022\021\001\002\000\020\002" +
    "\ufffc\005\ufffc\007\ufffc\014\ufffc\015\ufffc\016\ufffc\022\ufffc" +
    "\001\002\000\020\002\ufffb\005\ufffb\007\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\022\ufffb\001\002\000\014\016\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\001\002\000\014\016\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\001\002\000\004\007\uffdf" +
    "\001\002\000\014\016\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\001\002\000\014\016\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\001\002\000\010\030\041\136\043\147\040\001" +
    "\002\000\010\010\072\012\071\031\045\001\002\000\010" +
    "\010\uff27\031\uff27\136\uff27\001\002\000\010\010\047\031" +
    "\045\136\051\001\002\000\004\031\044\001\002\000\010" +
    "\010\uff28\031\uff28\136\uff28\001\002\000\004\113\055\001" +
    "\002\000\010\010\uff6d\012\uff6d\031\uff6d\001\002\000\014" +
    "\004\uffd5\007\uffd5\011\uffd5\014\uffd5\015\uffd5\001\002\000" +
    "\006\010\054\031\045\001\002\000\004\031\052\001\002" +
    "\000\010\010\uff26\031\uff26\136\uff26\001\002\000\010\010" +
    "\uff6c\012\uff6c\031\uff6c\001\002\000\014\004\uffd4\007\uffd4" +
    "\011\uffd4\014\uffd4\015\uffd4\001\002\000\004\101\057\001" +
    "\002\000\010\010\uff6b\012\uff6b\031\uff6b\001\002\000\012" +
    "\025\061\102\060\103\063\104\062\001\002\000\066\010" +
    "\uff40\012\uff40\031\uff40\070\uff40\072\uff40\105\uff40\106\uff40" +
    "\107\uff40\110\uff40\114\uff40\115\uff40\116\uff40\120\uff40\121" +
    "\uff40\122\uff40\123\uff40\124\uff40\125\uff40\126\uff40\127\uff40" +
    "\131\uff40\132\uff40\133\uff40\134\uff40\136\uff40\137\uff40\001" +
    "\002\000\004\102\070\001\002\000\010\102\uff3c\103\uff3c" +
    "\104\uff3c\001\002\000\010\102\uff3d\103\uff3d\104\uff3d\001" +
    "\002\000\010\102\065\103\067\104\066\001\002\000\066" +
    "\010\uff41\012\uff41\031\uff41\070\uff41\072\uff41\105\uff41\106" +
    "\uff41\107\uff41\110\uff41\114\uff41\115\uff41\116\uff41\120\uff41" +
    "\121\uff41\122\uff41\123\uff41\124\uff41\125\uff41\126\uff41\127" +
    "\uff41\131\uff41\132\uff41\133\uff41\134\uff41\136\uff41\137\uff41" +
    "\001\002\000\010\102\uff3e\103\uff3e\104\uff3e\001\002\000" +
    "\010\102\uff3f\103\uff3f\104\uff3f\001\002\000\010\010\uff6a" +
    "\012\uff6a\031\uff6a\001\002\000\020\002\uffd6\005\uffd6\007" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\022\uffd6\001\002\000\014" +
    "\004\uffd3\007\uffd3\011\uffd3\014\uffd3\015\uffd3\001\002\000" +
    "\006\010\074\031\045\001\002\000\014\004\uffd2\007\uffd2" +
    "\011\uffd2\014\uffd2\015\uffd2\001\002\000\014\004\116\007" +
    "\106\011\u0129\014\121\015\124\001\002\000\014\004\116" +
    "\007\310\011\274\014\121\015\124\001\002\000\014\004" +
    "\uffee\007\uffee\011\uffee\014\uffee\015\uffee\001\002\000\014" +
    "\004\uffe6\007\uffe6\011\uffe6\014\uffe6\015\uffe6\001\002\000" +
    "\014\004\116\007\u0128\011\u0129\014\121\015\124\001\002" +
    "\000\014\004\uffed\007\uffed\011\uffed\014\uffed\015\uffed\001" +
    "\002\000\014\004\uffe5\007\uffe5\011\uffe5\014\uffe5\015\uffe5" +
    "\001\002\000\014\004\uffec\007\uffec\011\uffec\014\uffec\015" +
    "\uffec\001\002\000\014\004\116\007\u013b\011\u013c\014\121" +
    "\015\124\001\002\000\042\035\325\036\322\037\324\040" +
    "\323\041\333\042\341\043\320\050\336\051\321\060\337" +
    "\061\326\062\317\063\331\064\330\065\334\066\332\001" +
    "\002\000\004\033\u0138\001\002\000\014\004\116\007\u0128" +
    "\011\u0129\014\121\015\124\001\002\000\020\002\uffd7\005" +
    "\uffd7\007\uffd7\014\uffd7\015\uffd7\016\uffd7\022\uffd7\001\002" +
    "\000\014\004\116\007\310\011\274\014\121\015\124\001" +
    "\002\000\014\004\uffe8\007\uffe8\011\uffe8\014\uffe8\015\uffe8" +
    "\001\002\000\004\006\302\001\002\000\014\004\uffef\007" +
    "\uffef\011\uffef\014\uffef\015\uffef\001\002\000\014\004\ufff2" +
    "\007\ufff2\011\ufff2\014\ufff2\015\ufff2\001\002\000\014\004" +
    "\116\007\106\011\274\014\121\015\124\001\002\000\014" +
    "\004\116\007\106\011\107\014\121\015\124\001\002\000" +
    "\014\004\ufff1\007\ufff1\011\ufff1\014\ufff1\015\ufff1\001\002" +
    "\000\014\004\uffea\007\uffea\011\uffea\014\uffea\015\uffea\001" +
    "\002\000\014\004\116\007\106\011\266\014\121\015\124" +
    "\001\002\000\014\004\ufff0\007\ufff0\011\ufff0\014\ufff0\015" +
    "\ufff0\001\002\000\014\004\ufff4\007\ufff4\011\ufff4\014\ufff4" +
    "\015\ufff4\001\002\000\014\004\uffe7\007\uffe7\011\uffe7\014" +
    "\uffe7\015\uffe7\001\002\000\014\004\116\007\106\011\257" +
    "\014\121\015\124\001\002\000\010\004\133\007\136\011" +
    "\141\001\002\000\014\004\uffeb\007\uffeb\011\uffeb\014\uffeb" +
    "\015\uffeb\001\002\000\014\004\uffe9\007\uffe9\011\uffe9\014" +
    "\uffe9\015\uffe9\001\002\000\010\004\uff7f\007\uff7f\011\uff7f" +
    "\001\002\000\010\004\254\007\136\011\141\001\002\000" +
    "\014\004\116\007\106\011\246\014\121\015\124\001\002" +
    "\000\004\045\144\001\002\000\014\004\uff83\007\uff83\011" +
    "\uff83\014\uff83\015\uff83\001\002\000\010\004\uff77\007\uff77" +
    "\011\uff77\001\002\000\004\043\142\001\002\000\004\010" +
    "\143\001\002\000\014\004\uff7a\007\uff7a\011\uff7a\014\uff7a" +
    "\015\uff7a\001\002\000\010\010\147\012\145\024\146\001" +
    "\002\000\010\004\uff72\007\uff72\011\uff72\001\002\000\010" +
    "\010\152\012\150\123\151\001\002\000\014\004\uff6f\007" +
    "\uff6f\011\uff6f\014\uff6f\015\uff6f\001\002\000\010\004\uff73" +
    "\007\uff73\011\uff73\001\002\000\030\024\164\031\163\032" +
    "\157\075\156\076\161\077\170\100\162\101\154\105\167" +
    "\117\165\131\153\001\002\000\014\004\uff70\007\uff70\011" +
    "\uff70\014\uff70\015\uff70\001\002\000\006\077\244\100\243" +
    "\001\002\000\010\102\060\103\063\104\062\001\002\000" +
    "\064\010\uff43\012\uff43\070\uff43\072\uff43\105\uff43\106\uff43" +
    "\107\uff43\110\uff43\114\uff43\115\uff43\116\uff43\120\uff43\121" +
    "\uff43\122\uff43\123\uff43\124\uff43\125\uff43\126\uff43\127\uff43" +
    "\131\uff43\132\uff43\133\uff43\134\uff43\136\uff43\137\uff43\001" +
    "\002\000\062\010\uff4c\012\uff4c\070\uff4c\105\uff4c\106\uff4c" +
    "\107\uff4c\110\uff4c\114\uff4c\115\uff4c\116\uff4c\120\uff4c\121" +
    "\uff4c\122\uff4c\123\uff4c\124\uff4c\125\uff4c\126\uff4c\127\uff4c" +
    "\131\uff4c\132\uff4c\133\uff4c\134\uff4c\136\uff4c\137\uff4c\001" +
    "\002\000\004\105\237\001\002\000\062\010\uff4d\012\uff4d" +
    "\070\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\114\uff4d\115" +
    "\uff4d\116\uff4d\120\uff4d\121\uff4d\122\uff4d\123\uff4d\124\uff4d" +
    "\125\uff4d\126\uff4d\127\uff4d\131\uff4d\132\uff4d\133\uff4d\134" +
    "\uff4d\136\uff4d\137\uff4d\001\002\000\064\010\uff42\012\uff42" +
    "\070\uff42\072\uff42\105\uff42\106\uff42\107\uff42\110\uff42\114" +
    "\uff42\115\uff42\116\uff42\120\uff42\121\uff42\122\uff42\123\uff42" +
    "\124\uff42\125\uff42\126\uff42\127\uff42\131\uff42\132\uff42\133" +
    "\uff42\134\uff42\136\uff42\137\uff42\001\002\000\064\010\uff44" +
    "\012\uff44\070\uff44\072\uff44\105\uff44\106\uff44\107\uff44\110" +
    "\uff44\114\uff44\115\uff44\116\uff44\120\uff44\121\uff44\122\uff44" +
    "\123\uff44\124\uff44\125\uff44\126\uff44\127\uff44\131\uff44\132" +
    "\uff44\133\uff44\134\uff44\136\uff44\137\uff44\001\002\000\062" +
    "\010\uff54\012\uff54\070\uff54\105\uff54\106\uff54\107\uff54\110" +
    "\uff54\114\uff54\115\uff54\116\uff54\120\uff54\121\uff54\122\uff54" +
    "\123\uff54\124\uff54\125\uff54\126\uff54\127\uff54\131\uff54\132" +
    "\uff54\133\uff54\134\uff54\136\uff54\137\uff54\001\002\000\062" +
    "\010\uff53\012\uff53\070\uff53\105\uff53\106\uff53\107\uff53\110" +
    "\uff53\114\uff53\115\uff53\116\uff53\120\uff53\121\uff53\122\uff53" +
    "\123\uff53\124\uff53\125\uff53\126\uff53\127\uff53\131\uff53\132" +
    "\uff53\133\uff53\134\uff53\136\uff53\137\uff53\001\002\000\030" +
    "\024\164\031\163\032\157\075\156\076\161\077\170\100" +
    "\162\101\154\105\167\117\165\131\153\001\002\000\050" +
    "\010\234\012\235\105\204\107\203\114\215\115\205\116" +
    "\174\120\173\121\200\122\175\124\207\125\214\126\177" +
    "\127\176\131\212\132\210\133\211\134\172\136\213\001" +
    "\002\000\030\024\164\031\163\032\157\075\156\076\161" +
    "\077\170\100\162\101\154\105\167\117\165\131\153\001" +
    "\002\000\064\010\uff46\012\uff46\070\uff46\072\uff46\105\uff46" +
    "\106\uff46\107\uff46\110\uff46\114\uff46\115\uff46\116\uff46\120" +
    "\uff46\121\uff46\122\uff46\123\uff46\124\uff46\125\uff46\126\uff46" +
    "\127\uff46\131\uff46\132\uff46\133\uff46\134\uff46\136\uff46\137" +
    "\uff46\001\002\000\046\105\204\106\201\107\203\114\215" +
    "\115\205\116\174\120\173\121\200\122\175\124\207\125" +
    "\214\126\177\127\176\131\212\132\210\133\211\134\172" +
    "\136\213\001\002\000\030\024\uff37\031\uff37\032\uff37\075" +
    "\uff37\076\uff37\077\uff37\100\uff37\101\uff37\105\uff37\117\uff37" +
    "\131\uff37\001\002\000\030\024\uff30\031\uff30\032\uff30\075" +
    "\uff30\076\uff30\077\uff30\100\uff30\101\uff30\105\uff30\117\uff30" +
    "\131\uff30\001\002\000\030\024\uff34\031\uff34\032\uff34\075" +
    "\uff34\076\uff34\077\uff34\100\uff34\101\uff34\105\uff34\117\uff34" +
    "\131\uff34\001\002\000\030\024\164\031\163\032\157\075" +
    "\156\076\161\077\170\100\162\101\154\105\167\117\165" +
    "\131\153\001\002\000\030\024\uff3b\031\uff3b\032\uff3b\075" +
    "\uff3b\076\uff3b\077\uff3b\100\uff3b\101\uff3b\105\uff3b\117\uff3b" +
    "\131\uff3b\001\002\000\030\024\uff35\031\uff35\032\uff35\075" +
    "\uff35\076\uff35\077\uff35\100\uff35\101\uff35\105\uff35\117\uff35" +
    "\131\uff35\001\002\000\030\024\uff2f\031\uff2f\032\uff2f\075" +
    "\uff2f\076\uff2f\077\uff2f\100\uff2f\101\uff2f\105\uff2f\117\uff2f" +
    "\131\uff2f\001\002\000\062\010\uff49\012\uff49\070\uff49\105" +
    "\uff49\106\uff49\107\uff49\110\uff49\114\uff49\115\uff49\116\uff49" +
    "\120\uff49\121\uff49\122\uff49\123\uff49\124\uff49\125\uff49\126" +
    "\uff49\127\uff49\131\uff49\132\uff49\133\uff49\134\uff49\136\uff49" +
    "\137\uff49\001\002\000\062\010\uff50\012\uff50\070\uff50\105" +
    "\uff50\106\uff50\107\uff50\110\uff50\114\uff50\115\uff50\116\uff50" +
    "\120\uff50\121\uff50\122\uff50\123\uff50\124\uff50\125\uff50\126" +
    "\uff50\127\uff50\131\uff50\132\uff50\133\uff50\134\uff50\136\uff50" +
    "\137\uff50\001\002\000\030\024\164\031\163\032\157\075" +
    "\156\076\161\077\170\100\162\101\154\105\167\117\165" +
    "\131\153\001\002\000\032\024\164\031\163\032\157\075" +
    "\156\076\161\077\170\100\162\101\154\105\167\106\222" +
    "\117\165\131\153\001\002\000\030\024\uff32\031\uff32\032" +
    "\uff32\075\uff32\076\uff32\077\uff32\100\uff32\101\uff32\105\uff32" +
    "\117\uff32\131\uff32\001\002\000\030\024\164\031\163\032" +
    "\157\075\156\076\161\077\170\100\162\101\154\105\167" +
    "\117\165\131\153\001\002\000\030\024\uff33\031\uff33\032" +
    "\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\105\uff33" +
    "\117\uff33\131\uff33\001\002\000\030\024\uff39\031\uff39\032" +
    "\uff39\075\uff39\076\uff39\077\uff39\100\uff39\101\uff39\105\uff39" +
    "\117\uff39\131\uff39\001\002\000\030\024\uff38\031\uff38\032" +
    "\uff38\075\uff38\076\uff38\077\uff38\100\uff38\101\uff38\105\uff38" +
    "\117\uff38\131\uff38\001\002\000\030\024\uff3a\031\uff3a\032" +
    "\uff3a\075\uff3a\076\uff3a\077\uff3a\100\uff3a\101\uff3a\105\uff3a" +
    "\117\uff3a\131\uff3a\001\002\000\006\031\217\077\216\001" +
    "\002\000\030\024\uff31\031\uff31\032\uff31\075\uff31\076\uff31" +
    "\077\uff31\100\uff31\101\uff31\105\uff31\117\uff31\131\uff31\001" +
    "\002\000\030\024\uff36\031\uff36\032\uff36\075\uff36\076\uff36" +
    "\077\uff36\100\uff36\101\uff36\105\uff36\117\uff36\131\uff36\001" +
    "\002\000\062\010\uff2d\012\uff2d\070\uff2d\105\uff2d\106\uff2d" +
    "\107\uff2d\110\uff2d\114\uff2d\115\uff2d\116\uff2d\120\uff2d\121" +
    "\uff2d\122\uff2d\123\uff2d\124\uff2d\125\uff2d\126\uff2d\127\uff2d" +
    "\131\uff2d\132\uff2d\133\uff2d\134\uff2d\136\uff2d\137\uff2d\001" +
    "\002\000\062\010\uff2e\012\uff2e\070\uff2e\105\uff2e\106\uff2e" +
    "\107\uff2e\110\uff2e\114\uff2e\115\uff2e\116\uff2e\120\uff2e\121" +
    "\uff2e\122\uff2e\123\uff2e\124\uff2e\125\uff2e\126\uff2e\127\uff2e" +
    "\131\uff2e\132\uff2e\133\uff2e\134\uff2e\136\uff2e\137\uff2e\001" +
    "\002\000\062\010\uff4a\012\uff4a\070\uff4a\105\204\106\uff4a" +
    "\107\203\110\uff4a\114\215\115\205\116\174\120\173\121" +
    "\200\122\175\123\uff4a\124\207\125\214\126\177\127\176" +
    "\131\212\132\210\133\211\134\172\136\213\137\uff4a\001" +
    "\002\000\006\106\225\137\224\001\002\000\062\010\uff4e" +
    "\012\uff4e\070\uff4e\105\uff4e\106\uff4e\107\uff4e\110\uff4e\114" +
    "\uff4e\115\uff4e\116\uff4e\120\uff4e\121\uff4e\122\uff4e\123\uff4e" +
    "\124\uff4e\125\uff4e\126\uff4e\127\uff4e\131\uff4e\132\uff4e\133" +
    "\uff4e\134\uff4e\136\uff4e\137\uff4e\001\002\000\052\010\uff56" +
    "\105\204\106\uff56\107\203\114\215\115\205\116\174\120" +
    "\173\121\200\122\175\124\207\125\214\126\177\127\176" +
    "\131\212\132\210\133\211\134\172\136\213\137\uff56\001" +
    "\002\000\030\024\164\031\163\032\157\075\156\076\161" +
    "\077\170\100\162\101\154\105\167\117\165\131\153\001" +
    "\002\000\062\010\uff4f\012\uff4f\070\uff4f\105\uff4f\106\uff4f" +
    "\107\uff4f\110\uff4f\114\uff4f\115\uff4f\116\uff4f\120\uff4f\121" +
    "\uff4f\122\uff4f\123\uff4f\124\uff4f\125\uff4f\126\uff4f\127\uff4f" +
    "\131\uff4f\132\uff4f\133\uff4f\134\uff4f\136\uff4f\137\uff4f\001" +
    "\002\000\052\010\uff55\105\204\106\uff55\107\203\114\215" +
    "\115\205\116\174\120\173\121\200\122\175\124\207\125" +
    "\214\126\177\127\176\131\212\132\210\133\211\134\172" +
    "\136\213\137\uff55\001\002\000\046\105\204\107\203\110" +
    "\230\114\215\115\205\116\174\120\173\121\200\122\175" +
    "\124\207\125\214\126\177\127\176\131\212\132\210\133" +
    "\211\134\172\136\213\001\002\000\062\010\uff2c\012\uff2c" +
    "\070\uff2c\105\uff2c\106\uff2c\107\uff2c\110\uff2c\114\uff2c\115" +
    "\uff2c\116\uff2c\120\uff2c\121\uff2c\122\uff2c\123\uff2c\124\uff2c" +
    "\125\uff2c\126\uff2c\127\uff2c\131\uff2c\132\uff2c\133\uff2c\134" +
    "\uff2c\136\uff2c\137\uff2c\001\002\000\046\105\204\107\203" +
    "\114\215\115\205\116\174\120\173\121\200\122\175\123" +
    "\232\124\207\125\214\126\177\127\176\131\212\132\210" +
    "\133\211\134\172\136\213\001\002\000\030\024\164\031" +
    "\163\032\157\075\156\076\161\077\170\100\162\101\154" +
    "\105\167\117\165\131\153\001\002\000\062\010\uff48\012" +
    "\uff48\070\uff48\105\204\106\uff48\107\203\110\uff48\114\215" +
    "\115\205\116\174\120\173\121\200\122\uff48\123\uff48\124" +
    "\207\125\214\126\177\127\176\131\212\132\210\133\211" +
    "\134\172\136\213\137\uff48\001\002\000\014\004\uff71\007" +
    "\uff71\011\uff71\014\uff71\015\uff71\001\002\000\010\004\uff74" +
    "\007\uff74\011\uff74\001\002\000\062\010\uff4b\012\uff4b\070" +
    "\uff4b\105\204\106\uff4b\107\203\110\uff4b\114\uff4b\115\uff4b" +
    "\116\uff4b\120\uff4b\121\uff4b\122\uff4b\123\uff4b\124\uff4b\125" +
    "\uff4b\126\uff4b\127\uff4b\131\uff4b\132\uff4b\133\uff4b\134\uff4b" +
    "\136\213\137\uff4b\001\002\000\032\024\164\031\163\032" +
    "\157\075\156\076\161\077\170\100\162\101\154\105\167" +
    "\106\241\117\165\131\153\001\002\000\006\106\242\137" +
    "\224\001\002\000\062\010\uff51\012\uff51\070\uff51\105\uff51" +
    "\106\uff51\107\uff51\110\uff51\114\uff51\115\uff51\116\uff51\120" +
    "\uff51\121\uff51\122\uff51\123\uff51\124\uff51\125\uff51\126\uff51" +
    "\127\uff51\131\uff51\132\uff51\133\uff51\134\uff51\136\uff51\137" +
    "\uff51\001\002\000\062\010\uff52\012\uff52\070\uff52\105\uff52" +
    "\106\uff52\107\uff52\110\uff52\114\uff52\115\uff52\116\uff52\120" +
    "\uff52\121\uff52\122\uff52\123\uff52\124\uff52\125\uff52\126\uff52" +
    "\127\uff52\131\uff52\132\uff52\133\uff52\134\uff52\136\uff52\137" +
    "\uff52\001\002\000\064\010\uff45\012\uff45\070\uff45\072\uff45" +
    "\105\uff45\106\uff45\107\uff45\110\uff45\114\uff45\115\uff45\116" +
    "\uff45\120\uff45\121\uff45\122\uff45\123\uff45\124\uff45\125\uff45" +
    "\126\uff45\127\uff45\131\uff45\132\uff45\133\uff45\134\uff45\136" +
    "\uff45\137\uff45\001\002\000\064\010\uff47\012\uff47\070\uff47" +
    "\072\uff47\105\uff47\106\uff47\107\uff47\110\uff47\114\uff47\115" +
    "\uff47\116\uff47\120\uff47\121\uff47\122\uff47\123\uff47\124\uff47" +
    "\125\uff47\126\uff47\127\uff47\131\uff47\132\uff47\133\uff47\134" +
    "\uff47\136\uff47\137\uff47\001\002\000\010\004\uff75\007\uff75" +
    "\011\uff75\001\002\000\004\045\252\001\002\000\014\004" +
    "\116\007\106\011\246\014\121\015\124\001\002\000\010" +
    "\004\uff76\007\uff76\011\uff76\001\002\000\014\004\ufff3\007" +
    "\ufff3\011\ufff3\014\ufff3\015\ufff3\001\002\000\004\010\253" +
    "\001\002\000\010\004\uff6e\007\uff6e\011\uff6e\001\002\000" +
    "\010\004\uff79\007\uff79\011\uff79\001\002\000\014\004\uff84" +
    "\007\uff84\011\uff84\014\uff84\015\uff84\001\002\000\010\004" +
    "\uff78\007\uff78\011\uff78\001\002\000\004\042\263\001\002" +
    "\000\014\004\116\007\106\011\257\014\121\015\124\001" +
    "\002\000\014\004\uff8a\007\uff8a\011\uff8a\014\uff8a\015\uff8a" +
    "\001\002\000\014\004\uff8b\007\uff8b\011\uff8b\014\uff8b\015" +
    "\uff8b\001\002\000\004\010\264\001\002\000\014\004\uff87" +
    "\007\uff87\011\uff87\014\uff87\015\uff87\001\002\000\014\004" +
    "\uffc8\007\uffc8\011\uffc8\014\uffc8\015\uffc8\001\002\000\004" +
    "\036\271\001\002\000\014\004\116\007\106\011\266\014" +
    "\121\015\124\001\002\000\014\004\uffc9\007\uffc9\011\uffc9" +
    "\014\uffc9\015\uffc9\001\002\000\004\010\272\001\002\000" +
    "\014\004\uffc4\007\uffc4\011\uffc4\014\uffc4\015\uffc4\001\002" +
    "\000\020\002\uffd8\005\uffd8\007\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\022\uffd8\001\002\000\004\040\300\001\002\000\014" +
    "\004\uffac\007\uffac\011\uffac\014\uffac\015\uffac\001\002\000" +
    "\014\004\116\007\106\011\274\014\121\015\124\001\002" +
    "\000\014\004\uffad\007\uffad\011\uffad\014\uffad\015\uffad\001" +
    "\002\000\004\010\301\001\002\000\014\004\uff9b\007\uff9b" +
    "\011\uff9b\014\uff9b\015\uff9b\001\002\000\004\011\304\001" +
    "\002\000\014\004\uffd0\007\uffd0\011\uffd0\014\uffd0\015\uffd0" +
    "\001\002\000\004\035\305\001\002\000\004\010\306\001" +
    "\002\000\014\004\uffce\007\uffce\011\uffce\014\uffce\015\uffce" +
    "\001\002\000\014\004\uffa4\007\uffa4\011\uffa4\014\uffa4\015" +
    "\uffa4\001\002\000\046\035\325\036\322\037\324\040\323" +
    "\041\333\042\341\043\320\050\336\051\321\054\335\055" +
    "\340\060\337\061\326\062\317\063\331\064\330\065\334" +
    "\066\332\001\002\000\014\004\uffaa\007\uffaa\011\uffaa\014" +
    "\uffaa\015\uffaa\001\002\000\014\004\116\007\310\011\274" +
    "\014\121\015\124\001\002\000\014\004\uffa0\007\uffa0\011" +
    "\uffa0\014\uffa0\015\uffa0\001\002\000\014\004\uffa5\007\uffa5" +
    "\011\uffa5\014\uffa5\015\uffa5\001\002\000\014\004\uffab\007" +
    "\uffab\011\uffab\014\uffab\015\uffab\001\002\000\014\004\uffa1" +
    "\007\uffa1\011\uffa1\014\uffa1\015\uffa1\001\002\000\004\010" +
    "\uff5b\001\002\000\012\010\u011f\012\u011d\030\u011e\031\045" +
    "\001\002\000\030\024\164\031\163\032\157\075\156\076" +
    "\161\077\170\100\162\101\154\105\167\117\165\131\153" +
    "\001\002\000\010\010\u0116\012\u0115\031\045\001\002\000" +
    "\034\010\u0110\012\u0111\024\164\031\163\032\157\075\156" +
    "\076\161\077\170\100\162\101\154\105\167\117\165\131" +
    "\153\001\002\000\034\010\u010b\012\u010c\024\164\031\163" +
    "\032\157\075\156\076\161\077\170\100\162\101\154\105" +
    "\167\117\165\131\153\001\002\000\004\010\u010a\001\002" +
    "\000\004\010\uff5c\001\002\000\004\010\u0109\001\002\000" +
    "\004\010\uff59\001\002\000\004\010\uff5a\001\002\000\004" +
    "\010\uff57\001\002\000\010\010\u0105\012\u0103\024\u0102\001" +
    "\002\000\004\010\uff58\001\002\000\032\010\377\024\164" +
    "\031\163\032\157\075\156\076\161\077\170\100\162\101" +
    "\154\105\167\117\165\131\153\001\002\000\030\024\164" +
    "\031\163\032\157\075\156\076\161\077\170\100\162\101" +
    "\154\105\167\117\165\131\153\001\002\000\004\010\uff5d" +
    "\001\002\000\004\010\354\001\002\000\006\012\343\024" +
    "\342\001\002\000\004\073\346\001\002\000\014\004\uff89" +
    "\007\uff89\011\uff89\014\uff89\015\uff89\001\002\000\004\010" +
    "\345\001\002\000\014\004\uff88\007\uff88\011\uff88\014\uff88" +
    "\015\uff88\001\002\000\004\074\350\001\002\000\004\010" +
    "\uff86\001\002\000\004\105\351\001\002\000\030\024\164" +
    "\031\163\032\157\075\156\076\161\077\170\100\162\101" +
    "\154\105\167\117\165\131\153\001\002\000\006\106\353" +
    "\137\224\001\002\000\004\010\uff85\001\002\000\014\004" +
    "\uff98\007\uff98\011\uff98\014\uff98\015\uff98\001\002\000\050" +
    "\010\356\070\362\105\204\107\203\114\215\115\205\116" +
    "\174\120\173\121\200\122\175\124\207\125\214\126\177" +
    "\127\176\131\212\132\210\133\211\134\172\136\213\001" +
    "\002\000\014\004\uffcd\007\uffcd\011\uffcd\014\uffcd\015\uffcd" +
    "\001\002\000\006\010\uff67\070\uff67\001\002\000\006\010" +
    "\375\070\362\001\002\000\006\010\uff69\070\uff69\001\002" +
    "\000\004\067\364\001\002\000\006\010\uff66\070\uff66\001" +
    "\002\000\010\010\uff5f\070\uff5f\071\365\001\002\000\020" +
    "\024\372\075\366\076\161\077\170\100\162\101\154\131" +
    "\153\001\002\000\010\010\uff61\070\uff61\072\uff61\001\002" +
    "\000\010\010\uff62\070\uff62\072\uff62\001\002\000\010\010" +
    "\uff65\070\uff65\072\373\001\002\000\010\010\uff64\070\uff64" +
    "\072\uff64\001\002\000\010\010\uff60\070\uff60\072\uff60\001" +
    "\002\000\020\024\372\075\366\076\161\077\170\100\162" +
    "\101\154\131\153\001\002\000\010\010\uff63\070\uff63\072" +
    "\uff63\001\002\000\014\004\uffcc\007\uffcc\011\uffcc\014\uffcc" +
    "\015\uffcc\001\002\000\006\010\uff68\070\uff68\001\002\000" +
    "\014\004\uff99\007\uff99\011\uff99\014\uff99\015\uff99\001\002" +
    "\000\006\010\u0101\137\224\001\002\000\014\004\uff9a\007" +
    "\uff9a\011\uff9a\014\uff9a\015\uff9a\001\002\000\004\073\u0107" +
    "\001\002\000\014\004\uff91\007\uff91\011\uff91\014\uff91\015" +
    "\uff91\001\002\000\004\010\u0106\001\002\000\014\004\uff8f" +
    "\007\uff8f\011\uff8f\014\uff8f\015\uff8f\001\002\000\014\004" +
    "\uff90\007\uff90\011\uff90\014\uff90\015\uff90\001\002\000\030" +
    "\024\164\031\163\032\157\075\156\076\161\077\170\100" +
    "\162\101\154\105\167\117\165\131\153\001\002\000\046" +
    "\010\uff8c\105\204\107\203\114\215\115\205\116\174\120" +
    "\173\121\200\122\175\124\207\125\214\126\177\127\176" +
    "\131\212\132\210\133\211\134\172\136\213\001\002\000" +
    "\014\004\uff5e\007\uff5e\011\uff5e\014\uff5e\015\uff5e\001\002" +
    "\000\004\006\uffcf\001\002\000\014\004\uffb2\007\uffb2\011" +
    "\uffb2\014\uffb2\015\uffb2\001\002\000\014\004\uffbc\007\uffbc" +
    "\011\uffbc\014\uffbc\015\uffbc\001\002\000\050\010\u010e\012" +
    "\u010f\105\204\107\203\114\215\115\205\116\174\120\173" +
    "\121\200\122\175\124\207\125\214\126\177\127\176\131" +
    "\212\132\210\133\211\134\172\136\213\001\002\000\014" +
    "\004\uffb3\007\uffb3\011\uffb3\014\uffb3\015\uffb3\001\002\000" +
    "\014\004\uffbd\007\uffbd\011\uffbd\014\uffbd\015\uffbd\001\002" +
    "\000\014\004\uff9c\007\uff9c\011\uff9c\014\uff9c\015\uff9c\001" +
    "\002\000\014\004\uffa6\007\uffa6\011\uffa6\014\uffa6\015\uffa6" +
    "\001\002\000\050\010\u0113\012\u0114\105\204\107\203\114" +
    "\215\115\205\116\174\120\173\121\200\122\175\124\207" +
    "\125\214\126\177\127\176\131\212\132\210\133\211\134" +
    "\172\136\213\001\002\000\014\004\uff9d\007\uff9d\011\uff9d" +
    "\014\uff9d\015\uff9d\001\002\000\014\004\uffa7\007\uffa7\011" +
    "\uffa7\014\uffa7\015\uffa7\001\002\000\014\004\uffc7\007\uffc7" +
    "\011\uffc7\014\uffc7\015\uffc7\001\002\000\014\004\uffc5\007" +
    "\uffc5\011\uffc5\014\uffc5\015\uffc5\001\002\000\006\010\u0118" +
    "\031\045\001\002\000\014\004\uffc6\007\uffc6\011\uffc6\014" +
    "\uffc6\015\uffc6\001\002\000\050\010\u011a\070\362\105\204" +
    "\107\203\114\215\115\205\116\174\120\173\121\200\122" +
    "\175\124\207\125\214\126\177\127\176\131\212\132\210" +
    "\133\211\134\172\136\213\001\002\000\014\004\uffcb\007" +
    "\uffcb\011\uffcb\014\uffcb\015\uffcb\001\002\000\006\010\u011c" +
    "\070\362\001\002\000\014\004\uffca\007\uffca\011\uffca\014" +
    "\uffca\015\uffca\001\002\000\014\004\uff80\007\uff80\011\uff80" +
    "\014\uff80\015\uff80\001\002\000\010\010\u0123\012\u0122\031" +
    "\045\001\002\000\010\004\uff7b\007\uff7b\011\uff7b\001\002" +
    "\000\006\010\u0121\031\045\001\002\000\010\004\uff7c\007" +
    "\uff7c\011\uff7c\001\002\000\014\004\uff82\007\uff82\011\uff82" +
    "\014\uff82\015\uff82\001\002\000\010\004\uff7d\007\uff7d\011" +
    "\uff7d\001\002\000\010\010\u0126\012\u0125\031\045\001\002" +
    "\000\014\004\uff81\007\uff81\011\uff81\014\uff81\015\uff81\001" +
    "\002\000\010\004\uff7e\007\uff7e\011\uff7e\001\002\000\014" +
    "\004\uffba\007\uffba\011\uffba\014\uffba\015\uffba\001\002\000" +
    "\046\035\325\036\322\037\324\040\323\041\333\042\341" +
    "\043\320\050\336\051\321\052\u0133\053\u0132\060\337\061" +
    "\326\062\317\063\331\064\330\065\334\066\332\001\002" +
    "\000\004\037\u0130\001\002\000\014\004\uffc1\007\uffc1\011" +
    "\uffc1\014\uffc1\015\uffc1\001\002\000\014\004\116\007\u0128" +
    "\011\u0129\014\121\015\124\001\002\000\014\004\uffb6\007" +
    "\uffb6\011\uffb6\014\uffb6\015\uffb6\001\002\000\014\004\uffbb" +
    "\007\uffbb\011\uffbb\014\uffbb\015\uffbb\001\002\000\014\004" +
    "\uffc0\007\uffc0\011\uffc0\014\uffc0\015\uffc0\001\002\000\014" +
    "\004\uffb7\007\uffb7\011\uffb7\014\uffb7\015\uffb7\001\002\000" +
    "\004\010\u0131\001\002\000\014\004\uffae\007\uffae\011\uffae" +
    "\014\uffae\015\uffae\001\002\000\004\010\u0137\001\002\000" +
    "\032\010\u0134\024\164\031\163\032\157\075\156\076\161" +
    "\077\170\100\162\101\154\105\167\117\165\131\153\001" +
    "\002\000\014\004\uffb0\007\uffb0\011\uffb0\014\uffb0\015\uffb0" +
    "\001\002\000\046\010\u0136\105\204\107\203\114\215\115" +
    "\205\116\174\120\173\121\200\122\175\124\207\125\214" +
    "\126\177\127\176\131\212\132\210\133\211\134\172\136" +
    "\213\001\002\000\014\004\uffb1\007\uffb1\011\uffb1\014\uffb1" +
    "\015\uffb1\001\002\000\014\004\uffaf\007\uffaf\011\uffaf\014" +
    "\uffaf\015\uffaf\001\002\000\004\010\u0139\001\002\000\020" +
    "\002\uffd1\005\uffd1\007\uffd1\014\uffd1\015\uffd1\016\uffd1\022" +
    "\uffd1\001\002\000\014\004\uff92\007\uff92\011\uff92\014\uff92" +
    "\015\uff92\001\002\000\044\035\325\036\322\037\324\040" +
    "\323\041\333\042\341\043\320\050\336\051\321\056\u0149" +
    "\060\337\061\326\062\317\063\331\064\330\065\334\066" +
    "\332\001\002\000\004\041\u0147\001\002\000\014\004\116" +
    "\007\u013b\011\u013c\014\121\015\124\001\002\000\014\004" +
    "\116\007\106\011\u013c\014\121\015\124\001\002\000\014" +
    "\004\uff94\007\uff94\011\uff94\014\uff94\015\uff94\001\002\000" +
    "\014\004\116\007\106\011\u013c\014\121\015\124\001\002" +
    "\000\014\004\uff95\007\uff95\011\uff95\014\uff95\015\uff95\001" +
    "\002\000\014\004\uff93\007\uff93\011\uff93\014\uff93\015\uff93" +
    "\001\002\000\014\004\116\007\106\011\u013c\014\121\015" +
    "\124\001\002\000\014\004\uff96\007\uff96\011\uff96\014\uff96" +
    "\015\uff96\001\002\000\014\004\116\007\106\011\u013c\014" +
    "\121\015\124\001\002\000\014\004\uff97\007\uff97\011\uff97" +
    "\014\uff97\015\uff97\001\002\000\004\010\u0148\001\002\000" +
    "\014\004\uff8e\007\uff8e\011\uff8e\014\uff8e\015\uff8e\001\002" +
    "\000\004\010\u014a\001\002\000\014\004\uff8d\007\uff8d\011" +
    "\uff8d\014\uff8d\015\uff8d\001\002\000\014\004\uffb8\007\uffb8" +
    "\011\uffb8\014\uffb8\015\uffb8\001\002\000\014\004\uffbf\007" +
    "\uffbf\011\uffbf\014\uffbf\015\uffbf\001\002\000\014\004\116" +
    "\007\u0128\011\u0129\014\121\015\124\001\002\000\014\004" +
    "\uffb4\007\uffb4\011\uffb4\014\uffb4\015\uffb4\001\002\000\014" +
    "\004\uffb9\007\uffb9\011\uffb9\014\uffb9\015\uffb9\001\002\000" +
    "\014\004\uffbe\007\uffbe\011\uffbe\014\uffbe\015\uffbe\001\002" +
    "\000\014\004\uffb5\007\uffb5\011\uffb5\014\uffb5\015\uffb5\001" +
    "\002\000\014\004\uffa2\007\uffa2\011\uffa2\014\uffa2\015\uffa2" +
    "\001\002\000\014\004\uffa8\007\uffa8\011\uffa8\014\uffa8\015" +
    "\uffa8\001\002\000\014\004\116\007\310\011\274\014\121" +
    "\015\124\001\002\000\014\004\uff9e\007\uff9e\011\uff9e\014" +
    "\uff9e\015\uff9e\001\002\000\014\004\uffa3\007\uffa3\011\uffa3" +
    "\014\uffa3\015\uffa3\001\002\000\014\004\uffa9\007\uffa9\011" +
    "\uffa9\014\uffa9\015\uffa9\001\002\000\014\004\uff9f\007\uff9f" +
    "\011\uff9f\014\uff9f\015\uff9f\001\002\000\014\004\uffc3\007" +
    "\uffc3\011\uffc3\014\uffc3\015\uffc3\001\002\000\014\004\116" +
    "\007\106\011\u0129\014\121\015\124\001\002\000\014\004" +
    "\uffc2\007\uffc2\011\uffc2\014\uffc2\015\uffc2\001\002\000\020" +
    "\002\uffe1\005\uffe1\007\uffe1\014\uffe1\015\uffe1\016\uffe1\022" +
    "\uffe1\001\002\000\004\002\000\001\002\000\016\005\010" +
    "\007\016\014\007\015\006\016\020\022\021\001\002\000" +
    "\020\002\uffff\005\010\007\016\014\007\015\006\016\020" +
    "\022\021\001\002\000\016\005\010\007\016\014\007\015" +
    "\006\016\020\022\021\001\002\000\020\002\001\005\010" +
    "\007\016\014\007\015\006\016\020\022\021\001\002\000" +
    "\006\027\u0163\146\u0164\001\002\000\006\010\u0165\031\045" +
    "\001\002\000\016\005\uffe2\007\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\022\uffe2\001\002\000\016\005\uffe4\007\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\022\uffe4\001\002\000\006\010\u0167\031" +
    "\045\001\002\000\016\005\uffe3\007\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\022\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\012\002\011\004\010\005\004\006\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\025\006" +
    "\u015d\001\001\000\002\001\001\000\022\003\021\004\024" +
    "\005\004\010\013\011\016\012\023\014\022\015\014\001" +
    "\001\000\006\014\u015b\015\014\001\001\000\064\016\110" +
    "\017\114\020\076\021\102\023\101\024\103\025\112\027" +
    "\130\030\121\031\131\032\107\033\074\034\111\035\116" +
    "\036\125\037\077\045\113\046\122\047\100\050\075\051" +
    "\104\052\126\054\127\077\124\100\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\027\010\013\011\016\012\030\014\022" +
    "\015\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\026\005\025\010\013\011\016\012\023\014\022" +
    "\015\014\001\001\000\002\001\001\000\016\005\027\010" +
    "\013\011\016\012\030\014\022\015\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\041\001\001\000\006\071\072\072\045\001" +
    "\001\000\002\001\001\000\006\071\047\072\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\055\001\001\000\002\001\001" +
    "\000\004\110\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\052\001\001\000\002\001\001\000\064\017\114\020" +
    "\076\021\102\023\101\024\103\025\112\027\130\030\121" +
    "\031\131\032\107\033\074\034\111\035\116\036\125\037" +
    "\077\045\113\046\122\047\100\050\075\051\104\052\126" +
    "\054\127\057\u0158\077\124\100\u0159\001\001\000\070\017" +
    "\114\020\076\021\102\023\101\024\103\025\112\027\130" +
    "\030\121\031\131\032\107\033\074\034\111\035\116\036" +
    "\125\037\077\042\u0154\043\u0151\045\113\046\122\047\100" +
    "\050\075\051\104\052\126\054\127\060\u0152\077\124\100" +
    "\u0153\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\017\114\020\076\021\102\023\101\024\103\025\112\027" +
    "\130\030\121\031\131\032\107\033\074\034\111\035\116" +
    "\036\125\037\077\040\u014d\041\u014a\045\113\046\122\047" +
    "\100\050\075\051\104\052\126\054\127\057\u014b\077\124" +
    "\100\u014c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\017\114\020\076\021\102\023\101" +
    "\024\103\025\112\027\130\030\121\031\131\032\107\033" +
    "\074\034\111\035\116\036\125\037\077\044\u013d\045\113" +
    "\046\122\047\100\050\075\051\104\052\126\054\127\061" +
    "\u0139\077\124\100\u013c\001\001\000\004\022\326\001\001" +
    "\000\002\001\001\000\070\017\114\020\076\021\102\023" +
    "\101\024\103\025\112\027\130\030\121\031\131\032\107" +
    "\033\074\034\111\035\116\036\125\037\077\040\u012b\041" +
    "\u0126\045\113\046\122\047\100\050\075\051\104\052\126" +
    "\054\127\057\u0129\077\124\100\u012a\001\001\000\002\001" +
    "\001\000\070\017\114\020\076\021\102\023\101\024\103" +
    "\025\112\027\130\030\121\031\131\032\107\033\074\034" +
    "\111\035\116\036\125\037\077\042\312\043\306\045\113" +
    "\046\122\047\100\050\075\051\104\052\126\054\127\060" +
    "\310\077\124\100\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\017" +
    "\114\020\076\021\102\023\101\024\103\025\112\027\130" +
    "\030\121\031\131\032\107\033\074\034\111\035\116\036" +
    "\125\037\077\045\113\046\122\047\100\050\075\051\104" +
    "\052\126\054\127\060\274\077\124\100\275\001\001\000" +
    "\062\016\272\017\114\020\076\021\102\023\101\024\103" +
    "\025\112\027\130\030\121\031\131\032\107\033\074\034" +
    "\111\035\116\036\125\037\077\045\113\046\122\047\100" +
    "\050\075\051\104\052\126\054\127\077\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\017\114\020\076" +
    "\021\102\023\101\024\103\025\112\027\130\030\121\031" +
    "\131\032\107\033\074\034\111\035\116\036\125\037\077" +
    "\045\113\046\122\047\100\050\075\051\104\052\126\054" +
    "\127\056\264\077\124\100\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\017\114\020" +
    "\076\021\102\023\101\024\103\025\112\027\130\030\121" +
    "\031\131\032\107\033\074\034\111\035\116\036\125\037" +
    "\077\045\113\046\122\047\100\050\075\051\104\052\126" +
    "\054\127\062\260\077\124\100\257\001\001\000\012\026" +
    "\137\053\134\063\136\070\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\255\053" +
    "\134\063\254\001\001\000\064\017\114\020\076\021\102" +
    "\023\101\024\103\025\112\027\130\030\121\031\131\032" +
    "\107\033\074\034\111\035\116\036\125\037\077\045\113" +
    "\046\122\047\100\050\075\051\104\052\126\054\127\064" +
    "\244\077\124\100\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\103\165\106\157\107\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\103\235\106\157\107\154\001\001" +
    "\000\006\104\201\111\205\001\001\000\010\103\170\106" +
    "\157\107\154\001\001\000\002\001\001\000\006\104\201" +
    "\111\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\103\230\106\157\107\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\103\226\106\157" +
    "\107\154\001\001\000\012\101\220\103\222\106\157\107" +
    "\154\001\001\000\002\001\001\000\010\103\217\106\157" +
    "\107\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\104\201\111\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\104\201\111\205\001\001\000" +
    "\010\103\225\106\157\107\154\001\001\000\002\001\001" +
    "\000\006\104\201\111\205\001\001\000\006\104\201\111" +
    "\205\001\001\000\002\001\001\000\006\104\201\111\205" +
    "\001\001\000\010\103\232\106\157\107\154\001\001\000" +
    "\006\104\201\111\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\104\201\111\205\001\001\000\012\101" +
    "\237\103\222\106\157\107\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\017\114\020\076\021\102\023\101\024\103\025\112\027" +
    "\130\030\121\031\131\032\107\033\074\034\111\035\116" +
    "\036\125\037\077\045\113\046\122\047\100\050\075\051" +
    "\104\052\126\054\127\064\247\077\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\017\114\020\076\021\102\023" +
    "\101\024\103\025\112\027\130\030\121\031\131\032\107" +
    "\033\074\034\111\035\116\036\125\037\077\045\113\046" +
    "\122\047\100\050\075\051\104\052\126\054\127\062\261" +
    "\077\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\017\114\020\076\021\102\023\101\024" +
    "\103\025\112\027\130\030\121\031\131\032\107\033\074" +
    "\034\111\035\116\036\125\037\077\045\113\046\122\047" +
    "\100\050\075\051\104\052\126\054\127\056\267\077\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\017\114\020\076\021\102\023\101\024\103\025" +
    "\112\027\130\030\121\031\131\032\107\033\074\034\111" +
    "\035\116\036\125\037\077\045\113\046\122\047\100\050" +
    "\075\051\104\052\126\054\127\060\276\077\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\326\001\001\000\002\001\001\000\066\017\114" +
    "\020\076\021\102\023\101\024\103\025\112\027\130\030" +
    "\121\031\131\032\107\033\074\034\111\035\116\036\125" +
    "\037\077\042\315\043\313\045\113\046\122\047\100\050" +
    "\075\051\104\052\126\054\127\060\314\077\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\u011f\072\045" +
    "\001\001\000\010\103\u0118\106\157\107\154\001\001\000" +
    "\006\071\u0116\072\045\001\001\000\010\103\u0111\106\157" +
    "\107\154\001\001\000\010\103\u010c\106\157\107\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u0103\001\001\000\002\001\001\000\012\101\377" +
    "\103\222\106\157\107\154\001\001\000\010\103\354\106" +
    "\157\107\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\343\001\001\000\004\067\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\101" +
    "\351\103\222\106\157\107\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\073\357\074" +
    "\360\075\362\076\356\104\201\111\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\074\375\075\362\076" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\102\367\105\370\106" +
    "\366\107\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\105\373\106\366\107\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\103\u0107\106\157\107\154\001\001\000\006" +
    "\104\201\111\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\104\201" +
    "\111\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\104\201\111\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\052\001\001\000\002" +
    "\001\001\000\016\073\u011a\074\360\075\362\076\356\104" +
    "\201\111\205\001\001\000\002\001\001\000\010\074\375" +
    "\075\362\076\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\071\u0123\072\045\001\001\000\002\001\001" +
    "\000\004\072\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\017\114\020\076\021\102\023\101\024\103\025\112\027" +
    "\130\030\121\031\131\032\107\033\074\034\111\035\116" +
    "\036\125\037\077\040\u012e\041\u012c\045\113\046\122\047" +
    "\100\050\075\051\104\052\126\054\127\057\u012d\077\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\103\u0134\106\157\107\154\001" +
    "\001\000\002\001\001\000\006\104\201\111\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\326\001\001" +
    "\000\002\001\001\000\064\017\114\020\076\021\102\023" +
    "\101\024\103\025\112\027\130\030\121\031\131\032\107" +
    "\033\074\034\111\035\116\036\125\037\077\044\u0142\045" +
    "\113\046\122\047\100\050\075\051\104\052\126\054\127" +
    "\061\u0141\077\250\001\001\000\064\017\114\020\076\021" +
    "\102\023\101\024\103\025\112\027\130\030\121\031\131" +
    "\032\107\033\074\034\111\035\116\036\125\037\077\045" +
    "\113\046\122\047\100\050\075\051\104\052\126\054\127" +
    "\061\u013e\077\124\100\u013f\001\001\000\002\001\001\000" +
    "\062\017\114\020\076\021\102\023\101\024\103\025\112" +
    "\027\130\030\121\031\131\032\107\033\074\034\111\035" +
    "\116\036\125\037\077\045\113\046\122\047\100\050\075" +
    "\051\104\052\126\054\127\061\u0140\077\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\017\114\020\076" +
    "\021\102\023\101\024\103\025\112\027\130\030\121\031" +
    "\131\032\107\033\074\034\111\035\116\036\125\037\077" +
    "\045\113\046\122\047\100\050\075\051\104\052\126\054" +
    "\127\061\u0143\077\124\100\u0144\001\001\000\002\001\001" +
    "\000\062\017\114\020\076\021\102\023\101\024\103\025" +
    "\112\027\130\030\121\031\131\032\107\033\074\034\111" +
    "\035\116\036\125\037\077\045\113\046\122\047\100\050" +
    "\075\051\104\052\126\054\127\061\u0145\077\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\017\114\020\076\021\102\023\101\024" +
    "\103\025\112\027\130\030\121\031\131\032\107\033\074" +
    "\034\111\035\116\036\125\037\077\040\u0150\041\u014e\045" +
    "\113\046\122\047\100\050\075\051\104\052\126\054\127" +
    "\057\u014f\077\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\017\114\020\076\021\102\023" +
    "\101\024\103\025\112\027\130\030\121\031\131\032\107" +
    "\033\074\034\111\035\116\036\125\037\077\042\u0157\043" +
    "\u0155\045\113\046\122\047\100\050\075\051\104\052\126" +
    "\054\127\060\u0156\077\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\017\114\020\076\021\102\023\101\024" +
    "\103\025\112\027\130\030\121\031\131\032\107\033\074" +
    "\034\111\035\116\036\125\037\077\045\113\046\122\047" +
    "\100\050\075\051\104\052\126\054\127\057\u015a\077\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\u015e\004\u015f\005\004\010\013\011\016" +
    "\012\023\014\022\015\014\001\001\000\016\005\027\010" +
    "\013\011\016\012\030\014\022\015\014\001\001\000\020" +
    "\003\u0160\005\025\010\013\011\016\012\023\014\022\015" +
    "\014\001\001\000\016\005\027\010\013\011\016\012\030" +
    "\014\022\015\014\001\001\000\002\001\001\000\006\071" +
    "\u0165\072\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\052\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SoyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SoyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SoyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SoyParser$actions {
  private final SoyParser parser;

  /** Constructor */
  CUP$SoyParser$actions(SoyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SoyParser$do_action(
    int                        CUP$SoyParser$act_num,
    java_cup.runtime.lr_parser CUP$SoyParser$parser,
    java.util.Stack            CUP$SoyParser$stack,
    int                        CUP$SoyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SoyParser$result;

      /* select the action based on the action number */
      switch (CUP$SoyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // template_ident ::= template_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = t + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // template_ident ::= TEMPLATE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // template_ident ::= DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // namespace_ident ::= namespace_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ns + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // namespace_ident ::= NAMESPACE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // namespace_ident ::= CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // dot_reference ::= LBRACK expr RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // dot_reference ::= DOT INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // dot_reference ::= DOT CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // binary_operator ::= OR 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("|"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // binary_operator ::= AND 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("&"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // binary_operator ::= GTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // binary_operator ::= GT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // binary_operator ::= LTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // binary_operator ::= LT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // binary_operator ::= NOTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("!="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // binary_operator ::= EQEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("=="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // binary_operator ::= MOD 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("%"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // binary_operator ::= DIV 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("/"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // binary_operator ::= MULT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("*"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // binary_operator ::= MINUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("-"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // binary_operator ::= PLUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("+"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // string_literal_buf ::= STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // string_literal_buf ::= STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // string_literal_buf ::= string_literal_buf STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // string_literal_buf ::= string_literal_buf STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // string_literal ::= STRING_LITERAL_BEGIN STRING_LITERAL_END 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // string_literal ::= STRING_LITERAL_BEGIN string_literal_buf STRING_LITERAL_END 
            {
              String RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = buf.toString(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // literal_value ::= BOOLEAN_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BooleanLiteralExpression(b); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // literal_value ::= string_literal 
            {
              LiteralExpression< ? > RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringLiteralExpression(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // literal_value ::= FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // literal_value ::= MINUS FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(0.0 - f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // literal_value ::= INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // literal_value ::= MINUS INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(0 - i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr ::= expr QUESTION expr COLON expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		Expression q = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TernaryOperatorExpression(q,y,n); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr ::= expr binary_operator expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,op,r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new UnaryOperatorExpression(new UnaryOperator("!"), e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr ::= literal_value 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > v = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr ::= expr LPAREN RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(f,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr ::= expr LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(f,args); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr ::= expr dot_reference 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,new BinaryOperator("."),r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr ::= CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_list ::= expr_list COMMA expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // special_char ::= RB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '}'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // special_char ::= LB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '{'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // special_char ::= TAB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\t'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // special_char ::= LF_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\n'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // special_char ::= CR_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\r'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // special_char ::= NIL_LITERAL 
            {
              Character RESULT =null;
		 RESULT = null; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // special_char ::= SP_LITERAL 
            {
              Character RESULT =null;
		 RESULT = ' '; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // special_char_tag ::= TAG_LBRACE special_char TAG_RBRACE 
            {
              SpecialCharacterTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new SpecialCharacterTag(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // simple_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("simple_directive",59, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // dir_expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dir_expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // dir_expr ::= literal_value 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > e = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // dir_expr_list ::= dir_expr_list DIRECTIVE_COMMA dir_expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // dir_expr_list ::= dir_expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // compound_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER DIRECTIVE_COLON dir_expr_list 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i, l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("compound_directive",60, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // directive ::= simple_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // directive ::= compound_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // directive_list ::= directive_list directive 
            {
              List<Directive> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // directive_list ::= directive 
            {
              List<Directive> RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Directive> l = new LinkedList<Directive>(); l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // attribute ::= CAPTURED_IDENTIFIER EQ STRING_LITERAL_BEGIN STRING_PARAMETER_REF STRING_LITERAL_END 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new Attribute(name,new ParameterRef(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // attribute ::= CAPTURED_IDENTIFIER EQ string_literal 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Attribute(name,new StringLiteralExpression(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // attribute_list ::= attribute_list attribute 
            {
              List<Attribute> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> l = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // attribute_list ::= attribute 
            {
              List<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Attribute> l = new LinkedList<Attribute>(); l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // end_param_tag ::= TAG_END_LBRACE PARAM TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("param"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_param_tag",50, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // begin_param_tag ::= TAG_LBRACE PARAM TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginParamTag(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // param_tag ::= TAG_LBRACE PARAM TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginParamTag(null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id,e),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // param_tag ::= begin_param_tag end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // param_tag ::= begin_param_tag content_sequence end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // param_list ::= param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // param_list ::= param_list param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // param_list ::= param_list TEMPLATE_TEXT 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // end_call_tag ::= TAG_END_LBRACE CALL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("call"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_call_tag",49, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // begin_call_tag ::= TAG_LBRACE CALL TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		 RESULT = new BeginCallTag(null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // begin_call_tag ::= TAG_LBRACE CALL attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // begin_call_tag ::= begin_call_tag TEMPLATE_TEXT 
            {
              BeginCallTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = b; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // call_tag ::= TAG_LBRACE CALL TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		 RESULT = new TemplateCall(new BeginCallTag(null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,att),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // call_tag ::= begin_call_tag end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // call_tag ::= begin_call_tag param_list end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> p = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,p); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_range ::= IN RANGE LPAREN expr_list RPAREN 
            {
              FunctionCall RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier("range"),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_range",53, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_seq ::= PARAMETER_REF for_range 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		FunctionCall r = (FunctionCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),r.getArgs()); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_seq",52, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // end_for_tag ::= TAG_END_LBRACE FOR TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("for"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_for_tag",48, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // begin_for_tag ::= TAG_LBRACE FOR for_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("for",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_for_tag",40, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_tag ::= TAG_LBRACE FOR TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("for")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_tag ::= begin_for_tag end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_tag ::= begin_for_tag content_sequence end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // foreach_seq ::= PARAMETER_REF IN expr 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_seq",51, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ifempty_tag ::= TAG_LBRACE IF_EMPTY TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("ifempty"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("ifempty_tag",34, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // end_foreach_tag ::= TAG_END_LBRACE FOREACH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("foreach"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_foreach_tag",47, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // begin_foreach_tag ::= TAG_LBRACE FOREACH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginIteratorTag("foreach",null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // begin_foreach_tag ::= TAG_LBRACE FOREACH foreach_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("foreach",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // foreach_tag ::= TAG_LBRACE FOREACH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("foreach"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // foreach_tag ::= begin_foreach_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // foreach_tag ::= begin_foreach_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // foreach_tag ::= begin_foreach_tag ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // foreach_tag ::= begin_foreach_tag ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie).append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		List<ContentWrapper< ? >> l1 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l2 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l1).append(ie).append(l2),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // default_tag ::= TAG_LBRACE DEFAULT TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("default"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("default_tag",33, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_tag ::= TAG_LBRACE CASE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("case"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_tag ::= TAG_LBRACE CASE expr_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("case",l,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // end_switch_tag ::= TAG_END_LBRACE SWITCH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("switch"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_switch_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // begin_switch_tag ::= TAG_LBRACE SWITCH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("switch",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // begin_switch_tag ::= TAG_LBRACE SWITCH expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("switch",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // open_switch_tag ::= begin_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // open_switch_tag ::= begin_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // open_switch_tag ::= open_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // open_switch_tag ::= open_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // closing_switch_tag ::= begin_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // closing_switch_tag ::= begin_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // closing_switch_tag ::= open_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // closing_switch_tag ::= open_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch_tag ::= TAG_LBRACE SWITCH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("switch"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // switch_tag ::= TAG_LBRACE SWITCH expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("switch",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_tag ::= begin_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_tag ::= begin_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_tag ::= open_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_tag ::= open_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_tag ::= closing_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switch_tag ::= closing_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // end_if_tag ::= TAG_END_LBRACE IF TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("if"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_if_tag",45, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // else_tag ::= TAG_LBRACE ELSE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("else"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // else_if_tag ::= TAG_LBRACE ELSE_IF TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("elseif"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else_if_tag ::= TAG_LBRACE ELSE_IF expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("elseif",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // begin_if_tag ::= TAG_LBRACE IF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("if",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // begin_if_tag ::= TAG_LBRACE IF expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("if",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // open_if_tag ::= begin_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // open_if_tag ::= begin_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // open_if_tag ::= open_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // open_if_tag ::= open_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // closing_if_tag ::= begin_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // closing_if_tag ::= begin_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // closing_if_tag ::= open_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // closing_if_tag ::= open_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_tag ::= TAG_LBRACE IF TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("if"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_tag ::= TAG_LBRACE IF expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("if",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_tag ::= begin_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_tag ::= begin_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_tag ::= open_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_tag ::= open_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_tag ::= closing_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_tag ::= closing_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // end_msg_tag ::= TAG_END_LBRACE MSG TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("msg"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_msg_tag",44, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // begin_msg_tag ::= TAG_LBRACE MSG TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("msg",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // begin_msg_tag ::= TAG_LBRACE MSG attribute_list TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("msg",att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // msg_tag ::= TAG_LBRACE MSG TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("msg")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // msg_tag ::= begin_msg_tag end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // msg_tag ::= begin_msg_tag content_sequence end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // print_tag ::= TAG_LBRACE PRINT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_tag ::= TAG_LBRACE PRINT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // end_literal_tag ::= TAG_END_LBRACE LITERAL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("literal"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_literal_tag",43, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // begin_literal_tag ::= TAG_LBRACE LITERAL TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("literal",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_literal_tag",35, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal_tag ::= begin_literal_tag LITERAL_TEXT end_literal_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,ContentWrapper.create(new CapturedText(text))); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_tag",17, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // end_template_tag ::= TAG_END_LBRACE TEMPLATE TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("template"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_template_tag",12, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(null,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		 RESULT = new BeginTemplateTag(null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginTemplateTag(null,null,null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // template_tag ::= begin_template_tag end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // template_tag ::= begin_template_tag content_sequence end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> c = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // template_doc_buffer ::= DOC_COMMENT_BEGIN 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // template_doc_buffer ::= DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_IDENTIFIER 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_TAG 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_BEGIN 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // template_doc_comment ::= template_doc_buffer DOC_COMMENT_END 
            {
              TemplateDocComment RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateDocComment(buf); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_comment",6, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // template_def ::= template_tag 
            {
              TemplateDeclaration RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(null,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // template_def ::= template_doc_comment template_tag 
            {
              TemplateDeclaration RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateDocComment doc = (TemplateDocComment)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(doc,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // namespace_def ::= TAG_LBRACE NAMESPACE RBRACE_ERROR 
            {
              NamespaceDeclaration RESULT =null;
		 RESULT = new NamespaceDeclaration(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id, att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // non_content_tag ::= special_char_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SpecialCharacterTag tag = (SpecialCharacterTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // non_content_tag ::= print_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag tag = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // content_tag ::= call_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateCall tag = (TemplateCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // content_tag ::= for_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // content_tag ::= foreach_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // content_tag ::= switch_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // content_tag ::= if_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // content_tag ::= msg_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // content_tag ::= literal_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // content_element ::= non_content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // content_element ::= content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // content_element ::= LINE_COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // content_element ::= COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // content_element ::= TEMPLATE_TEXT 
            {
              ContentWrapper< ? > RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new CapturedText(t)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // content_sequence ::= content_sequence content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // content_sequence ::= content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // skip_element ::= IGNORED_TEXT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // skip_element ::= LINE_COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // skip_element ::= COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // skip_element_list ::= skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // skip_element_list ::= skip_element_list skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // template_list ::= template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<TemplateDeclaration> l = new LinkedList<TemplateDeclaration>(); l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // template_list ::= template_list template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // template_list ::= template_list skip_element 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // template_file ::= namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // template_file ::= namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // template_file ::= skip_element_list namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= template_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateFile start_val = (TemplateFile)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		RESULT = start_val;
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SoyParser$parser.done_parsing();
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // template_file ::= skip_element_list namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

