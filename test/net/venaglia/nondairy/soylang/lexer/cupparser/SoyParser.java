
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 20 12:36:26 PDT 2012
//----------------------------------------------------

package net.venaglia.nondairy.soylang.lexer.cupparser;

import java_cup.runtime.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.expr.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.tag.*;
import net.venaglia.nondairy.soylang.lexer.*;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 20 12:36:26 PDT 2012
  */
public class SoyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SoyParser() {super();}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\344\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\100\003\000\002\100\004\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\006\006\000\002\006\007\000\002\006\005" +
    "\000\002\012\004\000\002\012\003\000\002\010\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\014\005" +
    "\000\002\014\004\000\002\014\006\000\002\015\006\000" +
    "\002\015\007\000\002\015\006\000\002\015\007\000\002" +
    "\016\005\000\002\023\005\000\002\045\005\000\002\055" +
    "\005\000\002\037\006\000\002\037\007\000\002\037\006" +
    "\000\002\037\007\000\002\024\005\000\002\024\004\000" +
    "\002\024\005\000\002\046\006\000\002\046\005\000\002" +
    "\056\005\000\002\027\004\000\002\027\005\000\002\027" +
    "\004\000\002\027\005\000\002\027\004\000\002\027\005" +
    "\000\002\027\006\000\002\027\005\000\002\033\005\000" +
    "\002\033\004\000\002\033\005\000\002\033\004\000\002" +
    "\032\005\000\002\032\004\000\002\032\005\000\002\032" +
    "\004\000\002\047\006\000\002\047\005\000\002\040\006" +
    "\000\002\040\005\000\002\041\005\000\002\057\005\000" +
    "\002\030\005\000\002\030\004\000\002\030\005\000\002" +
    "\030\004\000\002\030\005\000\002\030\004\000\002\030" +
    "\006\000\002\030\005\000\002\035\005\000\002\035\004" +
    "\000\002\035\005\000\002\035\004\000\002\034\005\000" +
    "\002\034\004\000\002\034\005\000\002\034\004\000\002" +
    "\050\006\000\002\050\005\000\002\060\005\000\002\042" +
    "\006\000\002\042\005\000\002\043\005\000\002\031\007" +
    "\000\002\031\006\000\002\031\006\000\002\031\005\000" +
    "\002\031\005\000\002\031\004\000\002\031\005\000\002" +
    "\051\006\000\002\051\005\000\002\061\005\000\002\044" +
    "\005\000\002\065\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\005\000\002\052\006\000\002\062\005\000" +
    "\002\066\004\000\002\067\007\000\002\036\005\000\002" +
    "\036\004\000\002\036\006\000\002\036\007\000\002\036" +
    "\005\000\002\054\004\000\002\054\007\000\002\054\006" +
    "\000\002\054\007\000\002\054\006\000\002\054\006\000" +
    "\002\054\005\000\002\063\005\000\002\070\004\000\002" +
    "\070\004\000\002\070\003\000\002\026\005\000\002\026" +
    "\004\000\002\026\010\000\002\026\006\000\002\026\005" +
    "\000\002\053\010\000\002\053\006\000\002\053\005\000" +
    "\002\064\005\000\002\071\003\000\002\071\004\000\002" +
    "\072\005\000\002\072\007\000\002\073\003\000\002\073" +
    "\004\000\002\074\003\000\002\074\003\000\002\076\006" +
    "\000\002\102\003\000\002\102\005\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\075\004\000\002" +
    "\021\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\101\003\000\002\101\005\000" +
    "\002\103\003\000\002\103\003\000\002\103\006\000\002" +
    "\103\005\000\002\103\004\000\002\103\006\000\002\103" +
    "\005\000\002\103\003\000\002\103\003\000\002\103\004" +
    "\000\002\103\005\000\002\103\005\000\002\103\007\000" +
    "\002\106\004\000\002\106\003\000\002\106\004\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\107" +
    "\005\000\002\107\004\000\002\110\004\000\002\110\004" +
    "\000\002\110\004\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\104\004\000\002\104\004\000\002" +
    "\104\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\013\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\012\005\010\007\004\014\007\015\006\001" +
    "\002\000\004\053\u016c\001\002\000\016\005\ufff8\007\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\024\ufff8\001\002\000\020\002" +
    "\ufff6\005\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6\024\ufff6" +
    "\001\002\000\020\002\ufff7\005\ufff7\007\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\024\ufff7\001\002\000\020\002\ufff5\005\ufff5" +
    "\007\ufff5\014\ufff5\015\ufff5\016\ufff5\024\ufff5\001\002\000" +
    "\012\005\010\007\004\014\007\015\006\001\002\000\004" +
    "\002\u0167\001\002\000\016\005\010\007\016\014\007\015" +
    "\006\016\020\024\021\001\002\000\004\007\016\001\002" +
    "\000\014\004\124\007\114\011\115\014\127\015\132\001" +
    "\002\000\004\037\042\001\002\000\022\015\035\016\037" +
    "\017\036\021\033\022\040\023\032\024\041\025\034\001" +
    "\002\000\022\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\001\002\000\022\015\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\001\002\000\020\002\ufffd\005\010\007\016\014\007\015" +
    "\006\016\020\024\021\001\002\000\020\002\uffe0\005\uffe0" +
    "\007\uffe0\014\uffe0\015\uffe0\016\uffe0\024\uffe0\001\002\000" +
    "\020\002\ufffa\005\ufffa\007\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\024\ufffa\001\002\000\016\005\010\007\016\014\007\015" +
    "\006\016\020\024\021\001\002\000\016\005\ufff9\007\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\024\ufff9\001\002\000\020\002" +
    "\ufffe\005\010\007\016\014\007\015\006\016\020\024\021" +
    "\001\002\000\020\002\ufffc\005\ufffc\007\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\024\ufffc\001\002\000\020\002\ufffb\005\ufffb" +
    "\007\ufffb\014\ufffb\015\ufffb\016\ufffb\024\ufffb\001\002\000" +
    "\022\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\001\002\000\022\015\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\001\002" +
    "\000\004\007\uffdf\001\002\000\022\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\001\002" +
    "\000\022\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\001\002\000\022\015\uffde\016\uffde" +
    "\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\001" +
    "\002\000\022\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\001\002\000\022\015\uffdc\016" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\001\002\000\012\033\045\034\044\142\047\154\043\001" +
    "\002\000\010\010\100\012\077\035\051\001\002\000\010" +
    "\010\uff1f\035\uff1f\142\uff1f\001\002\000\010\010\uff20\035" +
    "\uff20\142\uff20\001\002\000\010\010\053\035\051\142\055" +
    "\001\002\000\004\035\050\001\002\000\010\010\uff21\035" +
    "\uff21\142\uff21\001\002\000\004\117\061\001\002\000\010" +
    "\010\uff68\012\uff68\035\uff68\001\002\000\014\004\uffd2\007" +
    "\uffd2\011\uffd2\014\uffd2\015\uffd2\001\002\000\006\010\060" +
    "\035\051\001\002\000\004\035\056\001\002\000\010\010" +
    "\uff1e\035\uff1e\142\uff1e\001\002\000\010\010\uff67\012\uff67" +
    "\035\uff67\001\002\000\014\004\uffd1\007\uffd1\011\uffd1\014" +
    "\uffd1\015\uffd1\001\002\000\004\105\063\001\002\000\010" +
    "\010\uff66\012\uff66\035\uff66\001\002\000\014\030\066\106" +
    "\064\107\070\110\067\147\065\001\002\000\066\010\uff3b" +
    "\012\uff3b\035\uff3b\074\uff3b\076\uff3b\111\uff3b\112\uff3b\113" +
    "\uff3b\114\uff3b\120\uff3b\121\uff3b\122\uff3b\124\uff3b\125\uff3b" +
    "\126\uff3b\127\uff3b\130\uff3b\131\uff3b\132\uff3b\133\uff3b\135" +
    "\uff3b\136\uff3b\137\uff3b\140\uff3b\142\uff3b\143\uff3b\001\002" +
    "\000\012\106\uff35\107\uff35\110\uff35\147\uff35\001\002\000" +
    "\004\106\076\001\002\000\012\106\uff36\107\uff36\110\uff36" +
    "\147\uff36\001\002\000\012\106\uff37\107\uff37\110\uff37\147" +
    "\uff37\001\002\000\012\106\072\107\075\110\074\147\073" +
    "\001\002\000\066\010\uff3c\012\uff3c\035\uff3c\074\uff3c\076" +
    "\uff3c\111\uff3c\112\uff3c\113\uff3c\114\uff3c\120\uff3c\121\uff3c" +
    "\122\uff3c\124\uff3c\125\uff3c\126\uff3c\127\uff3c\130\uff3c\131" +
    "\uff3c\132\uff3c\133\uff3c\135\uff3c\136\uff3c\137\uff3c\140\uff3c" +
    "\142\uff3c\143\uff3c\001\002\000\012\106\uff38\107\uff38\110" +
    "\uff38\147\uff38\001\002\000\012\106\uff39\107\uff39\110\uff39" +
    "\147\uff39\001\002\000\012\106\uff3a\107\uff3a\110\uff3a\147" +
    "\uff3a\001\002\000\010\010\uff65\012\uff65\035\uff65\001\002" +
    "\000\020\002\uffd3\005\uffd3\007\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\024\uffd3\001\002\000\014\004\uffd0\007\uffd0\011\uffd0" +
    "\014\uffd0\015\uffd0\001\002\000\006\010\102\035\051\001" +
    "\002\000\014\004\uffcf\007\uffcf\011\uffcf\014\uffcf\015\uffcf" +
    "\001\002\000\014\004\124\007\114\011\u0133\014\127\015" +
    "\132\001\002\000\014\004\124\007\316\011\302\014\127" +
    "\015\132\001\002\000\014\004\uffee\007\uffee\011\uffee\014" +
    "\uffee\015\uffee\001\002\000\014\004\uffe6\007\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\001\002\000\014\004\124\007\u0132\011" +
    "\u0133\014\127\015\132\001\002\000\014\004\uffed\007\uffed" +
    "\011\uffed\014\uffed\015\uffed\001\002\000\014\004\uffe5\007" +
    "\uffe5\011\uffe5\014\uffe5\015\uffe5\001\002\000\014\004\uffec" +
    "\007\uffec\011\uffec\014\uffec\015\uffec\001\002\000\014\004" +
    "\124\007\u0145\011\u0146\014\127\015\132\001\002\000\042" +
    "\041\333\042\330\043\332\044\331\045\341\046\347\047" +
    "\326\054\344\055\327\064\345\065\334\066\325\067\337" +
    "\070\336\071\342\072\340\001\002\000\004\037\u0142\001" +
    "\002\000\014\004\124\007\u0132\011\u0133\014\127\015\132" +
    "\001\002\000\014\004\124\007\316\011\302\014\127\015" +
    "\132\001\002\000\020\002\uffd4\005\uffd4\007\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\024\uffd4\001\002\000\004\006\310\001" +
    "\002\000\014\004\uffe8\007\uffe8\011\uffe8\014\uffe8\015\uffe8" +
    "\001\002\000\014\004\uffef\007\uffef\011\uffef\014\uffef\015" +
    "\uffef\001\002\000\014\004\ufff2\007\ufff2\011\ufff2\014\ufff2" +
    "\015\ufff2\001\002\000\014\004\124\007\114\011\302\014" +
    "\127\015\132\001\002\000\014\004\124\007\114\011\115" +
    "\014\127\015\132\001\002\000\014\004\ufff1\007\ufff1\011" +
    "\ufff1\014\ufff1\015\ufff1\001\002\000\014\004\124\007\114" +
    "\011\274\014\127\015\132\001\002\000\014\004\uffea\007" +
    "\uffea\011\uffea\014\uffea\015\uffea\001\002\000\014\004\ufff0" +
    "\007\ufff0\011\ufff0\014\ufff0\015\ufff0\001\002\000\014\004" +
    "\ufff4\007\ufff4\011\ufff4\014\ufff4\015\ufff4\001\002\000\014" +
    "\004\uffe7\007\uffe7\011\uffe7\014\uffe7\015\uffe7\001\002\000" +
    "\014\004\124\007\114\011\265\014\127\015\132\001\002" +
    "\000\010\004\141\007\144\011\146\001\002\000\014\004" +
    "\uffeb\007\uffeb\011\uffeb\014\uffeb\015\uffeb\001\002\000\014" +
    "\004\uffe9\007\uffe9\011\uffe9\014\uffe9\015\uffe9\001\002\000" +
    "\010\004\uff7c\007\uff7c\011\uff7c\001\002\000\010\004\262" +
    "\007\144\011\146\001\002\000\014\004\124\007\114\011" +
    "\254\014\127\015\132\001\002\000\004\051\152\001\002" +
    "\000\014\004\uff80\007\uff80\011\uff80\014\uff80\015\uff80\001" +
    "\002\000\004\047\150\001\002\000\010\004\uff72\007\uff72" +
    "\011\uff72\001\002\000\004\010\151\001\002\000\014\004" +
    "\uff75\007\uff75\011\uff75\014\uff75\015\uff75\001\002\000\010" +
    "\010\155\012\153\027\154\001\002\000\010\004\uff6d\007" +
    "\uff6d\011\uff6d\001\002\000\010\010\160\012\156\127\157" +
    "\001\002\000\014\004\uff6a\007\uff6a\011\uff6a\014\uff6a\015" +
    "\uff6a\001\002\000\010\004\uff6e\007\uff6e\011\uff6e\001\002" +
    "\000\030\027\172\035\171\036\165\101\164\102\167\103" +
    "\176\104\170\105\162\111\175\123\173\135\161\001\002" +
    "\000\014\004\uff6b\007\uff6b\011\uff6b\014\uff6b\015\uff6b\001" +
    "\002\000\006\103\252\104\251\001\002\000\012\106\064" +
    "\107\070\110\067\147\065\001\002\000\064\010\uff3e\012" +
    "\uff3e\074\uff3e\076\uff3e\111\uff3e\112\uff3e\113\uff3e\114\uff3e" +
    "\120\uff3e\121\uff3e\122\uff3e\124\uff3e\125\uff3e\126\uff3e\127" +
    "\uff3e\130\uff3e\131\uff3e\132\uff3e\133\uff3e\135\uff3e\136\uff3e" +
    "\137\uff3e\140\uff3e\142\uff3e\143\uff3e\001\002\000\062\010" +
    "\uff47\012\uff47\074\uff47\111\uff47\112\uff47\113\uff47\114\uff47" +
    "\120\uff47\121\uff47\122\uff47\124\uff47\125\uff47\126\uff47\127" +
    "\uff47\130\uff47\131\uff47\132\uff47\133\uff47\135\uff47\136\uff47" +
    "\137\uff47\140\uff47\142\uff47\143\uff47\001\002\000\004\111" +
    "\245\001\002\000\062\010\uff48\012\uff48\074\uff48\111\uff48" +
    "\112\uff48\113\uff48\114\uff48\120\uff48\121\uff48\122\uff48\124" +
    "\uff48\125\uff48\126\uff48\127\uff48\130\uff48\131\uff48\132\uff48" +
    "\133\uff48\135\uff48\136\uff48\137\uff48\140\uff48\142\uff48\143" +
    "\uff48\001\002\000\064\010\uff3d\012\uff3d\074\uff3d\076\uff3d" +
    "\111\uff3d\112\uff3d\113\uff3d\114\uff3d\120\uff3d\121\uff3d\122" +
    "\uff3d\124\uff3d\125\uff3d\126\uff3d\127\uff3d\130\uff3d\131\uff3d" +
    "\132\uff3d\133\uff3d\135\uff3d\136\uff3d\137\uff3d\140\uff3d\142" +
    "\uff3d\143\uff3d\001\002\000\064\010\uff3f\012\uff3f\074\uff3f" +
    "\076\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\120\uff3f\121" +
    "\uff3f\122\uff3f\124\uff3f\125\uff3f\126\uff3f\127\uff3f\130\uff3f" +
    "\131\uff3f\132\uff3f\133\uff3f\135\uff3f\136\uff3f\137\uff3f\140" +
    "\uff3f\142\uff3f\143\uff3f\001\002\000\062\010\uff4f\012\uff4f" +
    "\074\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\120\uff4f\121" +
    "\uff4f\122\uff4f\124\uff4f\125\uff4f\126\uff4f\127\uff4f\130\uff4f" +
    "\131\uff4f\132\uff4f\133\uff4f\135\uff4f\136\uff4f\137\uff4f\140" +
    "\uff4f\142\uff4f\143\uff4f\001\002\000\062\010\uff4e\012\uff4e" +
    "\074\uff4e\111\uff4e\112\uff4e\113\uff4e\114\uff4e\120\uff4e\121" +
    "\uff4e\122\uff4e\124\uff4e\125\uff4e\126\uff4e\127\uff4e\130\uff4e" +
    "\131\uff4e\132\uff4e\133\uff4e\135\uff4e\136\uff4e\137\uff4e\140" +
    "\uff4e\142\uff4e\143\uff4e\001\002\000\030\027\172\035\171" +
    "\036\165\101\164\102\167\103\176\104\170\105\162\111" +
    "\175\123\173\135\161\001\002\000\050\010\242\012\243" +
    "\111\212\113\211\120\223\121\213\122\202\124\201\125" +
    "\206\126\203\130\215\131\222\132\205\133\204\135\220" +
    "\136\216\137\217\140\200\142\221\001\002\000\030\027" +
    "\172\035\171\036\165\101\164\102\167\103\176\104\170" +
    "\105\162\111\175\123\173\135\161\001\002\000\064\010" +
    "\uff41\012\uff41\074\uff41\076\uff41\111\uff41\112\uff41\113\uff41" +
    "\114\uff41\120\uff41\121\uff41\122\uff41\124\uff41\125\uff41\126" +
    "\uff41\127\uff41\130\uff41\131\uff41\132\uff41\133\uff41\135\uff41" +
    "\136\uff41\137\uff41\140\uff41\142\uff41\143\uff41\001\002\000" +
    "\046\111\212\112\207\113\211\120\223\121\213\122\202" +
    "\124\201\125\206\126\203\130\215\131\222\132\205\133" +
    "\204\135\220\136\216\137\217\140\200\142\221\001\002" +
    "\000\030\027\uff30\035\uff30\036\uff30\101\uff30\102\uff30\103" +
    "\uff30\104\uff30\105\uff30\111\uff30\123\uff30\135\uff30\001\002" +
    "\000\030\027\uff29\035\uff29\036\uff29\101\uff29\102\uff29\103" +
    "\uff29\104\uff29\105\uff29\111\uff29\123\uff29\135\uff29\001\002" +
    "\000\030\027\uff2d\035\uff2d\036\uff2d\101\uff2d\102\uff2d\103" +
    "\uff2d\104\uff2d\105\uff2d\111\uff2d\123\uff2d\135\uff2d\001\002" +
    "\000\030\027\172\035\171\036\165\101\164\102\167\103" +
    "\176\104\170\105\162\111\175\123\173\135\161\001\002" +
    "\000\030\027\uff34\035\uff34\036\uff34\101\uff34\102\uff34\103" +
    "\uff34\104\uff34\105\uff34\111\uff34\123\uff34\135\uff34\001\002" +
    "\000\030\027\uff2e\035\uff2e\036\uff2e\101\uff2e\102\uff2e\103" +
    "\uff2e\104\uff2e\105\uff2e\111\uff2e\123\uff2e\135\uff2e\001\002" +
    "\000\030\027\uff28\035\uff28\036\uff28\101\uff28\102\uff28\103" +
    "\uff28\104\uff28\105\uff28\111\uff28\123\uff28\135\uff28\001\002" +
    "\000\062\010\uff44\012\uff44\074\uff44\111\uff44\112\uff44\113" +
    "\uff44\114\uff44\120\uff44\121\uff44\122\uff44\124\uff44\125\uff44" +
    "\126\uff44\127\uff44\130\uff44\131\uff44\132\uff44\133\uff44\135" +
    "\uff44\136\uff44\137\uff44\140\uff44\142\uff44\143\uff44\001\002" +
    "\000\062\010\uff4b\012\uff4b\074\uff4b\111\uff4b\112\uff4b\113" +
    "\uff4b\114\uff4b\120\uff4b\121\uff4b\122\uff4b\124\uff4b\125\uff4b" +
    "\126\uff4b\127\uff4b\130\uff4b\131\uff4b\132\uff4b\133\uff4b\135" +
    "\uff4b\136\uff4b\137\uff4b\140\uff4b\142\uff4b\143\uff4b\001\002" +
    "\000\030\027\172\035\171\036\165\101\164\102\167\103" +
    "\176\104\170\105\162\111\175\123\173\135\161\001\002" +
    "\000\032\027\172\035\171\036\165\101\164\102\167\103" +
    "\176\104\170\105\162\111\175\112\230\123\173\135\161" +
    "\001\002\000\030\027\uff2b\035\uff2b\036\uff2b\101\uff2b\102" +
    "\uff2b\103\uff2b\104\uff2b\105\uff2b\111\uff2b\123\uff2b\135\uff2b" +
    "\001\002\000\030\027\172\035\171\036\165\101\164\102" +
    "\167\103\176\104\170\105\162\111\175\123\173\135\161" +
    "\001\002\000\030\027\uff2c\035\uff2c\036\uff2c\101\uff2c\102" +
    "\uff2c\103\uff2c\104\uff2c\105\uff2c\111\uff2c\123\uff2c\135\uff2c" +
    "\001\002\000\030\027\uff32\035\uff32\036\uff32\101\uff32\102" +
    "\uff32\103\uff32\104\uff32\105\uff32\111\uff32\123\uff32\135\uff32" +
    "\001\002\000\030\027\uff31\035\uff31\036\uff31\101\uff31\102" +
    "\uff31\103\uff31\104\uff31\105\uff31\111\uff31\123\uff31\135\uff31" +
    "\001\002\000\030\027\uff33\035\uff33\036\uff33\101\uff33\102" +
    "\uff33\103\uff33\104\uff33\105\uff33\111\uff33\123\uff33\135\uff33" +
    "\001\002\000\006\035\224\103\225\001\002\000\030\027" +
    "\uff2a\035\uff2a\036\uff2a\101\uff2a\102\uff2a\103\uff2a\104\uff2a" +
    "\105\uff2a\111\uff2a\123\uff2a\135\uff2a\001\002\000\030\027" +
    "\uff2f\035\uff2f\036\uff2f\101\uff2f\102\uff2f\103\uff2f\104\uff2f" +
    "\105\uff2f\111\uff2f\123\uff2f\135\uff2f\001\002\000\062\010" +
    "\uff27\012\uff27\074\uff27\111\uff27\112\uff27\113\uff27\114\uff27" +
    "\120\uff27\121\uff27\122\uff27\124\uff27\125\uff27\126\uff27\127" +
    "\uff27\130\uff27\131\uff27\132\uff27\133\uff27\135\uff27\136\uff27" +
    "\137\uff27\140\uff27\142\uff27\143\uff27\001\002\000\062\010" +
    "\uff26\012\uff26\074\uff26\111\uff26\112\uff26\113\uff26\114\uff26" +
    "\120\uff26\121\uff26\122\uff26\124\uff26\125\uff26\126\uff26\127" +
    "\uff26\130\uff26\131\uff26\132\uff26\133\uff26\135\uff26\136\uff26" +
    "\137\uff26\140\uff26\142\uff26\143\uff26\001\002\000\062\010" +
    "\uff45\012\uff45\074\uff45\111\212\112\uff45\113\211\114\uff45" +
    "\120\223\121\213\122\202\124\201\125\206\126\203\127" +
    "\uff45\130\215\131\222\132\205\133\204\135\220\136\216" +
    "\137\217\140\200\142\221\143\uff45\001\002\000\006\112" +
    "\233\143\232\001\002\000\062\010\uff49\012\uff49\074\uff49" +
    "\111\uff49\112\uff49\113\uff49\114\uff49\120\uff49\121\uff49\122" +
    "\uff49\124\uff49\125\uff49\126\uff49\127\uff49\130\uff49\131\uff49" +
    "\132\uff49\133\uff49\135\uff49\136\uff49\137\uff49\140\uff49\142" +
    "\uff49\143\uff49\001\002\000\052\010\uff51\111\212\112\uff51" +
    "\113\211\120\223\121\213\122\202\124\201\125\206\126" +
    "\203\130\215\131\222\132\205\133\204\135\220\136\216" +
    "\137\217\140\200\142\221\143\uff51\001\002\000\030\027" +
    "\172\035\171\036\165\101\164\102\167\103\176\104\170" +
    "\105\162\111\175\123\173\135\161\001\002\000\062\010" +
    "\uff4a\012\uff4a\074\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a" +
    "\120\uff4a\121\uff4a\122\uff4a\124\uff4a\125\uff4a\126\uff4a\127" +
    "\uff4a\130\uff4a\131\uff4a\132\uff4a\133\uff4a\135\uff4a\136\uff4a" +
    "\137\uff4a\140\uff4a\142\uff4a\143\uff4a\001\002\000\052\010" +
    "\uff50\111\212\112\uff50\113\211\120\223\121\213\122\202" +
    "\124\201\125\206\126\203\130\215\131\222\132\205\133" +
    "\204\135\220\136\216\137\217\140\200\142\221\143\uff50" +
    "\001\002\000\046\111\212\113\211\114\236\120\223\121" +
    "\213\122\202\124\201\125\206\126\203\130\215\131\222" +
    "\132\205\133\204\135\220\136\216\137\217\140\200\142" +
    "\221\001\002\000\062\010\uff25\012\uff25\074\uff25\111\uff25" +
    "\112\uff25\113\uff25\114\uff25\120\uff25\121\uff25\122\uff25\124" +
    "\uff25\125\uff25\126\uff25\127\uff25\130\uff25\131\uff25\132\uff25" +
    "\133\uff25\135\uff25\136\uff25\137\uff25\140\uff25\142\uff25\143" +
    "\uff25\001\002\000\046\111\212\113\211\120\223\121\213" +
    "\122\202\124\201\125\206\126\203\127\240\130\215\131" +
    "\222\132\205\133\204\135\220\136\216\137\217\140\200" +
    "\142\221\001\002\000\030\027\172\035\171\036\165\101" +
    "\164\102\167\103\176\104\170\105\162\111\175\123\173" +
    "\135\161\001\002\000\062\010\uff43\012\uff43\074\uff43\111" +
    "\212\112\uff43\113\211\114\uff43\120\223\121\213\122\202" +
    "\124\201\125\206\126\uff43\127\uff43\130\215\131\222\132" +
    "\205\133\204\135\220\136\216\137\217\140\200\142\221" +
    "\143\uff43\001\002\000\014\004\uff6c\007\uff6c\011\uff6c\014" +
    "\uff6c\015\uff6c\001\002\000\010\004\uff6f\007\uff6f\011\uff6f" +
    "\001\002\000\062\010\uff46\012\uff46\074\uff46\111\212\112" +
    "\uff46\113\211\114\uff46\120\uff46\121\uff46\122\uff46\124\uff46" +
    "\125\uff46\126\uff46\127\uff46\130\uff46\131\uff46\132\uff46\133" +
    "\uff46\135\uff46\136\uff46\137\uff46\140\uff46\142\221\143\uff46" +
    "\001\002\000\032\027\172\035\171\036\165\101\164\102" +
    "\167\103\176\104\170\105\162\111\175\112\247\123\173" +
    "\135\161\001\002\000\006\112\250\143\232\001\002\000" +
    "\062\010\uff4c\012\uff4c\074\uff4c\111\uff4c\112\uff4c\113\uff4c" +
    "\114\uff4c\120\uff4c\121\uff4c\122\uff4c\124\uff4c\125\uff4c\126" +
    "\uff4c\127\uff4c\130\uff4c\131\uff4c\132\uff4c\133\uff4c\135\uff4c" +
    "\136\uff4c\137\uff4c\140\uff4c\142\uff4c\143\uff4c\001\002\000" +
    "\062\010\uff4d\012\uff4d\074\uff4d\111\uff4d\112\uff4d\113\uff4d" +
    "\114\uff4d\120\uff4d\121\uff4d\122\uff4d\124\uff4d\125\uff4d\126" +
    "\uff4d\127\uff4d\130\uff4d\131\uff4d\132\uff4d\133\uff4d\135\uff4d" +
    "\136\uff4d\137\uff4d\140\uff4d\142\uff4d\143\uff4d\001\002\000" +
    "\064\010\uff40\012\uff40\074\uff40\076\uff40\111\uff40\112\uff40" +
    "\113\uff40\114\uff40\120\uff40\121\uff40\122\uff40\124\uff40\125" +
    "\uff40\126\uff40\127\uff40\130\uff40\131\uff40\132\uff40\133\uff40" +
    "\135\uff40\136\uff40\137\uff40\140\uff40\142\uff40\143\uff40\001" +
    "\002\000\064\010\uff42\012\uff42\074\uff42\076\uff42\111\uff42" +
    "\112\uff42\113\uff42\114\uff42\120\uff42\121\uff42\122\uff42\124" +
    "\uff42\125\uff42\126\uff42\127\uff42\130\uff42\131\uff42\132\uff42" +
    "\133\uff42\135\uff42\136\uff42\137\uff42\140\uff42\142\uff42\143" +
    "\uff42\001\002\000\010\004\uff70\007\uff70\011\uff70\001\002" +
    "\000\004\051\260\001\002\000\014\004\124\007\114\011" +
    "\254\014\127\015\132\001\002\000\010\004\uff71\007\uff71" +
    "\011\uff71\001\002\000\014\004\ufff3\007\ufff3\011\ufff3\014" +
    "\ufff3\015\ufff3\001\002\000\004\010\261\001\002\000\010" +
    "\004\uff69\007\uff69\011\uff69\001\002\000\010\004\uff74\007" +
    "\uff74\011\uff74\001\002\000\014\004\uff81\007\uff81\011\uff81" +
    "\014\uff81\015\uff81\001\002\000\010\004\uff73\007\uff73\011" +
    "\uff73\001\002\000\004\046\271\001\002\000\014\004\124" +
    "\007\114\011\265\014\127\015\132\001\002\000\014\004" +
    "\uff87\007\uff87\011\uff87\014\uff87\015\uff87\001\002\000\014" +
    "\004\uff88\007\uff88\011\uff88\014\uff88\015\uff88\001\002\000" +
    "\004\010\272\001\002\000\014\004\uff84\007\uff84\011\uff84" +
    "\014\uff84\015\uff84\001\002\000\014\004\uffc5\007\uffc5\011" +
    "\uffc5\014\uffc5\015\uffc5\001\002\000\004\042\277\001\002" +
    "\000\014\004\124\007\114\011\274\014\127\015\132\001" +
    "\002\000\014\004\uffc6\007\uffc6\011\uffc6\014\uffc6\015\uffc6" +
    "\001\002\000\004\010\300\001\002\000\014\004\uffc1\007" +
    "\uffc1\011\uffc1\014\uffc1\015\uffc1\001\002\000\020\002\uffd5" +
    "\005\uffd5\007\uffd5\014\uffd5\015\uffd5\016\uffd5\024\uffd5\001" +
    "\002\000\004\044\306\001\002\000\014\004\uffa9\007\uffa9" +
    "\011\uffa9\014\uffa9\015\uffa9\001\002\000\014\004\124\007" +
    "\114\011\302\014\127\015\132\001\002\000\014\004\uffaa" +
    "\007\uffaa\011\uffaa\014\uffaa\015\uffaa\001\002\000\004\010" +
    "\307\001\002\000\014\004\uff98\007\uff98\011\uff98\014\uff98" +
    "\015\uff98\001\002\000\004\011\312\001\002\000\014\004" +
    "\uffcd\007\uffcd\011\uffcd\014\uffcd\015\uffcd\001\002\000\004" +
    "\041\313\001\002\000\004\010\314\001\002\000\014\004" +
    "\uffcb\007\uffcb\011\uffcb\014\uffcb\015\uffcb\001\002\000\014" +
    "\004\uffa1\007\uffa1\011\uffa1\014\uffa1\015\uffa1\001\002\000" +
    "\046\041\333\042\330\043\332\044\331\045\341\046\347" +
    "\047\326\054\344\055\327\060\343\061\346\064\345\065" +
    "\334\066\325\067\337\070\336\071\342\072\340\001\002" +
    "\000\014\004\uffa7\007\uffa7\011\uffa7\014\uffa7\015\uffa7\001" +
    "\002\000\014\004\124\007\316\011\302\014\127\015\132" +
    "\001\002\000\014\004\uff9d\007\uff9d\011\uff9d\014\uff9d\015" +
    "\uff9d\001\002\000\014\004\uffa2\007\uffa2\011\uffa2\014\uffa2" +
    "\015\uffa2\001\002\000\014\004\uffa8\007\uffa8\011\uffa8\014" +
    "\uffa8\015\uffa8\001\002\000\014\004\uff9e\007\uff9e\011\uff9e" +
    "\014\uff9e\015\uff9e\001\002\000\004\010\uff56\001\002\000" +
    "\014\010\u0126\012\u0123\033\u0125\034\u0124\035\051\001\002" +
    "\000\030\027\172\035\171\036\165\101\164\102\167\103" +
    "\176\104\170\105\162\111\175\123\173\135\161\001\002" +
    "\000\010\010\u011c\012\u011b\035\051\001\002\000\034\010" +
    "\u0116\012\u0117\027\172\035\171\036\165\101\164\102\167" +
    "\103\176\104\170\105\162\111\175\123\173\135\161\001" +
    "\002\000\034\010\u0111\012\u0112\027\172\035\171\036\165" +
    "\101\164\102\167\103\176\104\170\105\162\111\175\123" +
    "\173\135\161\001\002\000\004\010\u0110\001\002\000\004" +
    "\010\uff57\001\002\000\004\010\u010f\001\002\000\004\010" +
    "\uff54\001\002\000\004\010\uff55\001\002\000\004\010\uff52" +
    "\001\002\000\010\010\u010b\012\u0108\027\u0109\001\002\000" +
    "\004\010\uff53\001\002\000\032\010\u0105\027\172\035\171" +
    "\036\165\101\164\102\167\103\176\104\170\105\162\111" +
    "\175\123\173\135\161\001\002\000\030\027\172\035\171" +
    "\036\165\101\164\102\167\103\176\104\170\105\162\111" +
    "\175\123\173\135\161\001\002\000\004\010\uff58\001\002" +
    "\000\004\010\362\001\002\000\006\012\351\027\350\001" +
    "\002\000\004\077\354\001\002\000\014\004\uff86\007\uff86" +
    "\011\uff86\014\uff86\015\uff86\001\002\000\004\010\353\001" +
    "\002\000\014\004\uff85\007\uff85\011\uff85\014\uff85\015\uff85" +
    "\001\002\000\004\100\356\001\002\000\004\010\uff83\001" +
    "\002\000\004\111\357\001\002\000\030\027\172\035\171" +
    "\036\165\101\164\102\167\103\176\104\170\105\162\111" +
    "\175\123\173\135\161\001\002\000\006\112\361\143\232" +
    "\001\002\000\004\010\uff82\001\002\000\014\004\uff95\007" +
    "\uff95\011\uff95\014\uff95\015\uff95\001\002\000\050\010\364" +
    "\074\370\111\212\113\211\120\223\121\213\122\202\124" +
    "\201\125\206\126\203\130\215\131\222\132\205\133\204" +
    "\135\220\136\216\137\217\140\200\142\221\001\002\000" +
    "\014\004\uffca\007\uffca\011\uffca\014\uffca\015\uffca\001\002" +
    "\000\006\010\uff62\074\uff62\001\002\000\006\010\u0103\074" +
    "\370\001\002\000\006\010\uff64\074\uff64\001\002\000\004" +
    "\073\372\001\002\000\006\010\uff61\074\uff61\001\002\000" +
    "\010\010\uff5a\074\uff5a\075\373\001\002\000\020\027\u0100" +
    "\101\374\102\167\103\176\104\170\105\162\135\161\001" +
    "\002\000\010\010\uff5c\074\uff5c\076\uff5c\001\002\000\010" +
    "\010\uff5d\074\uff5d\076\uff5d\001\002\000\010\010\uff60\074" +
    "\uff60\076\u0101\001\002\000\010\010\uff5f\074\uff5f\076\uff5f" +
    "\001\002\000\010\010\uff5b\074\uff5b\076\uff5b\001\002\000" +
    "\020\027\u0100\101\374\102\167\103\176\104\170\105\162" +
    "\135\161\001\002\000\010\010\uff5e\074\uff5e\076\uff5e\001" +
    "\002\000\014\004\uffc9\007\uffc9\011\uffc9\014\uffc9\015\uffc9" +
    "\001\002\000\006\010\uff63\074\uff63\001\002\000\014\004" +
    "\uff96\007\uff96\011\uff96\014\uff96\015\uff96\001\002\000\006" +
    "\010\u0107\143\232\001\002\000\014\004\uff97\007\uff97\011" +
    "\uff97\014\uff97\015\uff97\001\002\000\014\004\uff8e\007\uff8e" +
    "\011\uff8e\014\uff8e\015\uff8e\001\002\000\004\077\u010d\001" +
    "\002\000\004\010\u010c\001\002\000\014\004\uff8c\007\uff8c" +
    "\011\uff8c\014\uff8c\015\uff8c\001\002\000\014\004\uff8d\007" +
    "\uff8d\011\uff8d\014\uff8d\015\uff8d\001\002\000\030\027\172" +
    "\035\171\036\165\101\164\102\167\103\176\104\170\105" +
    "\162\111\175\123\173\135\161\001\002\000\046\010\uff89" +
    "\111\212\113\211\120\223\121\213\122\202\124\201\125" +
    "\206\126\203\130\215\131\222\132\205\133\204\135\220" +
    "\136\216\137\217\140\200\142\221\001\002\000\014\004" +
    "\uff59\007\uff59\011\uff59\014\uff59\015\uff59\001\002\000\004" +
    "\006\uffcc\001\002\000\014\004\uffaf\007\uffaf\011\uffaf\014" +
    "\uffaf\015\uffaf\001\002\000\014\004\uffb9\007\uffb9\011\uffb9" +
    "\014\uffb9\015\uffb9\001\002\000\050\010\u0114\012\u0115\111" +
    "\212\113\211\120\223\121\213\122\202\124\201\125\206" +
    "\126\203\130\215\131\222\132\205\133\204\135\220\136" +
    "\216\137\217\140\200\142\221\001\002\000\014\004\uffb0" +
    "\007\uffb0\011\uffb0\014\uffb0\015\uffb0\001\002\000\014\004" +
    "\uffba\007\uffba\011\uffba\014\uffba\015\uffba\001\002\000\014" +
    "\004\uff99\007\uff99\011\uff99\014\uff99\015\uff99\001\002\000" +
    "\014\004\uffa3\007\uffa3\011\uffa3\014\uffa3\015\uffa3\001\002" +
    "\000\050\010\u0119\012\u011a\111\212\113\211\120\223\121" +
    "\213\122\202\124\201\125\206\126\203\130\215\131\222" +
    "\132\205\133\204\135\220\136\216\137\217\140\200\142" +
    "\221\001\002\000\014\004\uff9a\007\uff9a\011\uff9a\014\uff9a" +
    "\015\uff9a\001\002\000\014\004\uffa4\007\uffa4\011\uffa4\014" +
    "\uffa4\015\uffa4\001\002\000\014\004\uffc4\007\uffc4\011\uffc4" +
    "\014\uffc4\015\uffc4\001\002\000\014\004\uffc2\007\uffc2\011" +
    "\uffc2\014\uffc2\015\uffc2\001\002\000\006\010\u011e\035\051" +
    "\001\002\000\014\004\uffc3\007\uffc3\011\uffc3\014\uffc3\015" +
    "\uffc3\001\002\000\050\010\u0120\074\370\111\212\113\211" +
    "\120\223\121\213\122\202\124\201\125\206\126\203\130" +
    "\215\131\222\132\205\133\204\135\220\136\216\137\217" +
    "\140\200\142\221\001\002\000\014\004\uffc8\007\uffc8\011" +
    "\uffc8\014\uffc8\015\uffc8\001\002\000\006\010\u0122\074\370" +
    "\001\002\000\014\004\uffc7\007\uffc7\011\uffc7\014\uffc7\015" +
    "\uffc7\001\002\000\014\004\uff7d\007\uff7d\011\uff7d\014\uff7d" +
    "\015\uff7d\001\002\000\006\010\u012e\035\051\001\002\000" +
    "\010\010\u012a\012\u0129\035\051\001\002\000\010\004\uff76" +
    "\007\uff76\011\uff76\001\002\000\006\010\u0128\035\051\001" +
    "\002\000\010\004\uff77\007\uff77\011\uff77\001\002\000\014" +
    "\004\uff7f\007\uff7f\011\uff7f\014\uff7f\015\uff7f\001\002\000" +
    "\010\004\uff7a\007\uff7a\011\uff7a\001\002\000\010\010\u012d" +
    "\012\u012c\035\051\001\002\000\014\004\uff7e\007\uff7e\011" +
    "\uff7e\014\uff7e\015\uff7e\001\002\000\010\004\uff7b\007\uff7b" +
    "\011\uff7b\001\002\000\010\004\uff78\007\uff78\011\uff78\001" +
    "\002\000\006\010\u0130\035\051\001\002\000\010\004\uff79" +
    "\007\uff79\011\uff79\001\002\000\014\004\uffb7\007\uffb7\011" +
    "\uffb7\014\uffb7\015\uffb7\001\002\000\046\041\333\042\330" +
    "\043\332\044\331\045\341\046\347\047\326\054\344\055" +
    "\327\056\u013d\057\u013c\064\345\065\334\066\325\067\337" +
    "\070\336\071\342\072\340\001\002\000\004\043\u013a\001" +
    "\002\000\014\004\uffbe\007\uffbe\011\uffbe\014\uffbe\015\uffbe" +
    "\001\002\000\014\004\124\007\u0132\011\u0133\014\127\015" +
    "\132\001\002\000\014\004\uffb3\007\uffb3\011\uffb3\014\uffb3" +
    "\015\uffb3\001\002\000\014\004\uffb8\007\uffb8\011\uffb8\014" +
    "\uffb8\015\uffb8\001\002\000\014\004\uffbd\007\uffbd\011\uffbd" +
    "\014\uffbd\015\uffbd\001\002\000\014\004\uffb4\007\uffb4\011" +
    "\uffb4\014\uffb4\015\uffb4\001\002\000\004\010\u013b\001\002" +
    "\000\014\004\uffab\007\uffab\011\uffab\014\uffab\015\uffab\001" +
    "\002\000\004\010\u0141\001\002\000\032\010\u013e\027\172" +
    "\035\171\036\165\101\164\102\167\103\176\104\170\105" +
    "\162\111\175\123\173\135\161\001\002\000\014\004\uffad" +
    "\007\uffad\011\uffad\014\uffad\015\uffad\001\002\000\046\010" +
    "\u0140\111\212\113\211\120\223\121\213\122\202\124\201" +
    "\125\206\126\203\130\215\131\222\132\205\133\204\135" +
    "\220\136\216\137\217\140\200\142\221\001\002\000\014" +
    "\004\uffae\007\uffae\011\uffae\014\uffae\015\uffae\001\002\000" +
    "\014\004\uffac\007\uffac\011\uffac\014\uffac\015\uffac\001\002" +
    "\000\004\010\u0143\001\002\000\020\002\uffce\005\uffce\007" +
    "\uffce\014\uffce\015\uffce\016\uffce\024\uffce\001\002\000\014" +
    "\004\uff8f\007\uff8f\011\uff8f\014\uff8f\015\uff8f\001\002\000" +
    "\044\041\333\042\330\043\332\044\331\045\341\046\347" +
    "\047\326\054\344\055\327\062\u0153\064\345\065\334\066" +
    "\325\067\337\070\336\071\342\072\340\001\002\000\004" +
    "\045\u0151\001\002\000\014\004\124\007\u0145\011\u0146\014" +
    "\127\015\132\001\002\000\014\004\124\007\114\011\u0146" +
    "\014\127\015\132\001\002\000\014\004\uff91\007\uff91\011" +
    "\uff91\014\uff91\015\uff91\001\002\000\014\004\124\007\114" +
    "\011\u0146\014\127\015\132\001\002\000\014\004\uff92\007" +
    "\uff92\011\uff92\014\uff92\015\uff92\001\002\000\014\004\uff90" +
    "\007\uff90\011\uff90\014\uff90\015\uff90\001\002\000\014\004" +
    "\124\007\114\011\u0146\014\127\015\132\001\002\000\014" +
    "\004\uff93\007\uff93\011\uff93\014\uff93\015\uff93\001\002\000" +
    "\014\004\124\007\114\011\u0146\014\127\015\132\001\002" +
    "\000\014\004\uff94\007\uff94\011\uff94\014\uff94\015\uff94\001" +
    "\002\000\004\010\u0152\001\002\000\014\004\uff8b\007\uff8b" +
    "\011\uff8b\014\uff8b\015\uff8b\001\002\000\004\010\u0154\001" +
    "\002\000\014\004\uff8a\007\uff8a\011\uff8a\014\uff8a\015\uff8a" +
    "\001\002\000\014\004\uffb5\007\uffb5\011\uffb5\014\uffb5\015" +
    "\uffb5\001\002\000\014\004\uffbc\007\uffbc\011\uffbc\014\uffbc" +
    "\015\uffbc\001\002\000\014\004\124\007\u0132\011\u0133\014" +
    "\127\015\132\001\002\000\014\004\uffb1\007\uffb1\011\uffb1" +
    "\014\uffb1\015\uffb1\001\002\000\014\004\uffb6\007\uffb6\011" +
    "\uffb6\014\uffb6\015\uffb6\001\002\000\014\004\uffbb\007\uffbb" +
    "\011\uffbb\014\uffbb\015\uffbb\001\002\000\014\004\uffb2\007" +
    "\uffb2\011\uffb2\014\uffb2\015\uffb2\001\002\000\014\004\uff9f" +
    "\007\uff9f\011\uff9f\014\uff9f\015\uff9f\001\002\000\014\004" +
    "\uffa5\007\uffa5\011\uffa5\014\uffa5\015\uffa5\001\002\000\014" +
    "\004\124\007\316\011\302\014\127\015\132\001\002\000" +
    "\014\004\uff9b\007\uff9b\011\uff9b\014\uff9b\015\uff9b\001\002" +
    "\000\014\004\uffa0\007\uffa0\011\uffa0\014\uffa0\015\uffa0\001" +
    "\002\000\014\004\uffa6\007\uffa6\011\uffa6\014\uffa6\015\uffa6" +
    "\001\002\000\014\004\uff9c\007\uff9c\011\uff9c\014\uff9c\015" +
    "\uff9c\001\002\000\014\004\uffc0\007\uffc0\011\uffc0\014\uffc0" +
    "\015\uffc0\001\002\000\014\004\124\007\114\011\u0133\014" +
    "\127\015\132\001\002\000\014\004\uffbf\007\uffbf\011\uffbf" +
    "\014\uffbf\015\uffbf\001\002\000\020\002\uffe1\005\uffe1\007" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\024\uffe1\001\002\000\004" +
    "\002\000\001\002\000\016\005\010\007\016\014\007\015" +
    "\006\016\020\024\021\001\002\000\020\002\uffff\005\010" +
    "\007\016\014\007\015\006\016\020\024\021\001\002\000" +
    "\016\005\010\007\016\014\007\015\006\016\020\024\021" +
    "\001\002\000\020\002\001\005\010\007\016\014\007\015" +
    "\006\016\020\024\021\001\002\000\006\032\u016d\153\u016e" +
    "\001\002\000\006\010\u016f\035\051\001\002\000\016\005" +
    "\uffe2\007\uffe2\014\uffe2\015\uffe2\016\uffe2\024\uffe2\001\002" +
    "\000\016\005\uffe4\007\uffe4\014\uffe4\015\uffe4\016\uffe4\024" +
    "\uffe4\001\002\000\006\010\u0171\035\051\001\002\000\016" +
    "\005\uffe3\007\uffe3\014\uffe3\015\uffe3\016\uffe3\024\uffe3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\012\002\011\004\010\005\004\006\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\025\006" +
    "\u0167\001\001\000\002\001\001\000\022\003\021\004\024" +
    "\005\004\010\013\011\016\012\023\014\022\015\014\001" +
    "\001\000\006\014\u0165\015\014\001\001\000\064\016\117" +
    "\017\122\020\104\021\110\023\107\024\111\025\121\027" +
    "\136\030\130\031\137\032\115\033\102\034\116\035\124" +
    "\036\133\037\105\045\120\046\127\047\106\050\103\051" +
    "\112\052\134\054\135\077\132\100\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\027\010\013\011\016\012\030\014\022" +
    "\015\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\026\005\025\010\013\011\016\012\023\014\022" +
    "\015\014\001\001\000\002\001\001\000\016\005\027\010" +
    "\013\011\016\012\030\014\022\015\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\045\001\001\000\006\071\100\072\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\071\053\072" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\061\001\001\000" +
    "\002\001\001\000\004\110\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\056" +
    "\001\001\000\002\001\001\000\064\017\122\020\104\021" +
    "\110\023\107\024\111\025\121\027\136\030\130\031\137" +
    "\032\115\033\102\034\116\035\124\036\133\037\105\045" +
    "\120\046\127\047\106\050\103\051\112\052\134\054\135" +
    "\057\u0162\077\132\100\u0163\001\001\000\070\017\122\020" +
    "\104\021\110\023\107\024\111\025\121\027\136\030\130" +
    "\031\137\032\115\033\102\034\116\035\124\036\133\037" +
    "\105\042\u015e\043\u015b\045\120\046\127\047\106\050\103" +
    "\051\112\052\134\054\135\060\u015c\077\132\100\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\017\122" +
    "\020\104\021\110\023\107\024\111\025\121\027\136\030" +
    "\130\031\137\032\115\033\102\034\116\035\124\036\133" +
    "\037\105\040\u0157\041\u0154\045\120\046\127\047\106\050" +
    "\103\051\112\052\134\054\135\057\u0155\077\132\100\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\017\122\020\104\021\110\023\107\024\111" +
    "\025\121\027\136\030\130\031\137\032\115\033\102\034" +
    "\116\035\124\036\133\037\105\044\u0147\045\120\046\127" +
    "\047\106\050\103\051\112\052\134\054\135\061\u0143\077" +
    "\132\100\u0146\001\001\000\004\022\334\001\001\000\002" +
    "\001\001\000\070\017\122\020\104\021\110\023\107\024" +
    "\111\025\121\027\136\030\130\031\137\032\115\033\102" +
    "\034\116\035\124\036\133\037\105\040\u0135\041\u0130\045" +
    "\120\046\127\047\106\050\103\051\112\052\134\054\135" +
    "\057\u0133\077\132\100\u0134\001\001\000\070\017\122\020" +
    "\104\021\110\023\107\024\111\025\121\027\136\030\130" +
    "\031\137\032\115\033\102\034\116\035\124\036\133\037" +
    "\105\042\320\043\314\045\120\046\127\047\106\050\103" +
    "\051\112\052\134\054\135\060\316\077\132\100\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\017\122\020" +
    "\104\021\110\023\107\024\111\025\121\027\136\030\130" +
    "\031\137\032\115\033\102\034\116\035\124\036\133\037" +
    "\105\045\120\046\127\047\106\050\103\051\112\052\134" +
    "\054\135\060\302\077\132\100\303\001\001\000\062\016" +
    "\300\017\122\020\104\021\110\023\107\024\111\025\121" +
    "\027\136\030\130\031\137\032\115\033\102\034\116\035" +
    "\124\036\133\037\105\045\120\046\127\047\106\050\103" +
    "\051\112\052\134\054\135\077\256\001\001\000\002\001" +
    "\001\000\064\017\122\020\104\021\110\023\107\024\111" +
    "\025\121\027\136\030\130\031\137\032\115\033\102\034" +
    "\116\035\124\036\133\037\105\045\120\046\127\047\106" +
    "\050\103\051\112\052\134\054\135\056\272\077\132\100" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\017\122\020\104\021" +
    "\110\023\107\024\111\025\121\027\136\030\130\031\137" +
    "\032\115\033\102\034\116\035\124\036\133\037\105\045" +
    "\120\046\127\047\106\050\103\051\112\052\134\054\135" +
    "\062\266\077\132\100\265\001\001\000\012\026\146\053" +
    "\142\063\144\070\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\263\053\142\063" +
    "\262\001\001\000\064\017\122\020\104\021\110\023\107" +
    "\024\111\025\121\027\136\030\130\031\137\032\115\033" +
    "\102\034\116\035\124\036\133\037\105\045\120\046\127" +
    "\047\106\050\103\051\112\052\134\054\135\064\252\077" +
    "\132\100\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\103" +
    "\173\106\165\107\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\103\243\106\165\107\162\001\001\000\006" +
    "\104\207\111\213\001\001\000\010\103\176\106\165\107" +
    "\162\001\001\000\002\001\001\000\006\104\207\111\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\103\236\106\165\107\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\103\234\106\165\107\162" +
    "\001\001\000\012\101\226\103\230\106\165\107\162\001" +
    "\001\000\002\001\001\000\010\103\225\106\165\107\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\104\207\111\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\104\207\111\213\001\001\000\010\103" +
    "\233\106\165\107\162\001\001\000\002\001\001\000\006" +
    "\104\207\111\213\001\001\000\006\104\207\111\213\001" +
    "\001\000\002\001\001\000\006\104\207\111\213\001\001" +
    "\000\010\103\240\106\165\107\162\001\001\000\006\104" +
    "\207\111\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\104\207\111\213\001\001\000\012\101\245\103" +
    "\230\106\165\107\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\017\122" +
    "\020\104\021\110\023\107\024\111\025\121\027\136\030" +
    "\130\031\137\032\115\033\102\034\116\035\124\036\133" +
    "\037\105\045\120\046\127\047\106\050\103\051\112\052" +
    "\134\054\135\064\255\077\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\017\122\020\104\021\110\023\107\024" +
    "\111\025\121\027\136\030\130\031\137\032\115\033\102" +
    "\034\116\035\124\036\133\037\105\045\120\046\127\047" +
    "\106\050\103\051\112\052\134\054\135\062\267\077\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\017\122\020\104\021\110\023\107\024\111\025" +
    "\121\027\136\030\130\031\137\032\115\033\102\034\116" +
    "\035\124\036\133\037\105\045\120\046\127\047\106\050" +
    "\103\051\112\052\134\054\135\056\275\077\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\017\122\020\104\021\110\023\107\024\111\025\121\027" +
    "\136\030\130\031\137\032\115\033\102\034\116\035\124" +
    "\036\133\037\105\045\120\046\127\047\106\050\103\051" +
    "\112\052\134\054\135\060\304\077\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\334\001\001\000\002\001\001\000\066\017\122\020\104" +
    "\021\110\023\107\024\111\025\121\027\136\030\130\031" +
    "\137\032\115\033\102\034\116\035\124\036\133\037\105" +
    "\042\323\043\321\045\120\046\127\047\106\050\103\051" +
    "\112\052\134\054\135\060\322\077\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\071\u0126\072\051\001\001" +
    "\000\010\103\u011e\106\165\107\162\001\001\000\006\071" +
    "\u011c\072\051\001\001\000\010\103\u0117\106\165\107\162" +
    "\001\001\000\010\103\u0112\106\165\107\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0109\001\001\000\002\001\001\000\012\101\u0105\103\230" +
    "\106\165\107\162\001\001\000\010\103\362\106\165\107" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\351\001\001\000\004\067\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\101\357\103" +
    "\230\106\165\107\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\073\365\074\366\075" +
    "\370\076\364\104\207\111\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\074\u0103\075\370\076\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\102\375\105\376\106\374\107" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\105" +
    "\u0101\106\374\107\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\103\u010d\106\165\107\162\001\001\000\006\104\207" +
    "\111\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\104\207\111\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\104\207\111\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\056\001\001\000\002\001\001" +
    "\000\016\073\u0120\074\366\075\370\076\364\104\207\111" +
    "\213\001\001\000\002\001\001\000\010\074\u0103\075\370" +
    "\076\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\071\u012e\072\051\001\001\000\006\071\u012a\072\051" +
    "\001\001\000\002\001\001\000\004\072\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\017\122\020\104\021\110" +
    "\023\107\024\111\025\121\027\136\030\130\031\137\032" +
    "\115\033\102\034\116\035\124\036\133\037\105\040\u0138" +
    "\041\u0136\045\120\046\127\047\106\050\103\051\112\052" +
    "\134\054\135\057\u0137\077\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\103\u013e\106\165\107\162\001\001\000\002\001\001\000" +
    "\006\104\207\111\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\334\001\001\000\002\001\001\000\064" +
    "\017\122\020\104\021\110\023\107\024\111\025\121\027" +
    "\136\030\130\031\137\032\115\033\102\034\116\035\124" +
    "\036\133\037\105\044\u014c\045\120\046\127\047\106\050" +
    "\103\051\112\052\134\054\135\061\u014b\077\256\001\001" +
    "\000\064\017\122\020\104\021\110\023\107\024\111\025" +
    "\121\027\136\030\130\031\137\032\115\033\102\034\116" +
    "\035\124\036\133\037\105\045\120\046\127\047\106\050" +
    "\103\051\112\052\134\054\135\061\u0148\077\132\100\u0149" +
    "\001\001\000\002\001\001\000\062\017\122\020\104\021" +
    "\110\023\107\024\111\025\121\027\136\030\130\031\137" +
    "\032\115\033\102\034\116\035\124\036\133\037\105\045" +
    "\120\046\127\047\106\050\103\051\112\052\134\054\135" +
    "\061\u014a\077\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\017\122\020\104\021\110\023\107\024\111" +
    "\025\121\027\136\030\130\031\137\032\115\033\102\034" +
    "\116\035\124\036\133\037\105\045\120\046\127\047\106" +
    "\050\103\051\112\052\134\054\135\061\u014d\077\132\100" +
    "\u014e\001\001\000\002\001\001\000\062\017\122\020\104" +
    "\021\110\023\107\024\111\025\121\027\136\030\130\031" +
    "\137\032\115\033\102\034\116\035\124\036\133\037\105" +
    "\045\120\046\127\047\106\050\103\051\112\052\134\054" +
    "\135\061\u014f\077\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\017\122" +
    "\020\104\021\110\023\107\024\111\025\121\027\136\030" +
    "\130\031\137\032\115\033\102\034\116\035\124\036\133" +
    "\037\105\040\u015a\041\u0158\045\120\046\127\047\106\050" +
    "\103\051\112\052\134\054\135\057\u0159\077\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\017\122\020\104\021\110\023\107\024\111\025\121\027" +
    "\136\030\130\031\137\032\115\033\102\034\116\035\124" +
    "\036\133\037\105\042\u0161\043\u015f\045\120\046\127\047" +
    "\106\050\103\051\112\052\134\054\135\060\u0160\077\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\017\122" +
    "\020\104\021\110\023\107\024\111\025\121\027\136\030" +
    "\130\031\137\032\115\033\102\034\116\035\124\036\133" +
    "\037\105\045\120\046\127\047\106\050\103\051\112\052" +
    "\134\054\135\057\u0164\077\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\u0168\004" +
    "\u0169\005\004\010\013\011\016\012\023\014\022\015\014" +
    "\001\001\000\016\005\027\010\013\011\016\012\030\014" +
    "\022\015\014\001\001\000\020\003\u016a\005\025\010\013" +
    "\011\016\012\023\014\022\015\014\001\001\000\016\005" +
    "\027\010\013\011\016\012\030\014\022\015\014\001\001" +
    "\000\002\001\001\000\006\071\u016f\072\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\056\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SoyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SoyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SoyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SoyParser$actions {
  private final SoyParser parser;

  /** Constructor */
  CUP$SoyParser$actions(SoyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SoyParser$do_action(
    int                        CUP$SoyParser$act_num,
    java_cup.runtime.lr_parser CUP$SoyParser$parser,
    java.util.Stack            CUP$SoyParser$stack,
    int                        CUP$SoyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SoyParser$result;

      /* select the action based on the action number */
      switch (CUP$SoyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // template_ident ::= template_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = t + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // template_ident ::= DELTEMPLATE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // template_ident ::= TEMPLATE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // template_ident ::= DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // namespace_ident ::= namespace_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ns + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // namespace_ident ::= NAMESPACE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // namespace_ident ::= CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // dot_reference ::= LBRACK expr RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // dot_reference ::= DOT INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // dot_reference ::= DOT CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // binary_operator ::= OR 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("|"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // binary_operator ::= AND 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("&"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // binary_operator ::= GTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // binary_operator ::= GT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // binary_operator ::= LTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // binary_operator ::= LT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // binary_operator ::= NOTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("!="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // binary_operator ::= EQEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("=="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // binary_operator ::= MOD 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("%"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // binary_operator ::= DIV 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("/"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // binary_operator ::= MULT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("*"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // binary_operator ::= MINUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("-"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // binary_operator ::= PLUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("+"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // string_literal_buf ::= BRACE_IN_STRING 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SoySymbol s = (SoySymbol)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder("{"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // string_literal_buf ::= STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // string_literal_buf ::= STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // string_literal_buf ::= string_literal_buf BRACE_IN_STRING 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SoySymbol s = (SoySymbol)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // string_literal_buf ::= string_literal_buf STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // string_literal_buf ::= string_literal_buf STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // string_literal ::= STRING_LITERAL_BEGIN STRING_LITERAL_END 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // string_literal ::= STRING_LITERAL_BEGIN string_literal_buf STRING_LITERAL_END 
            {
              String RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = buf.toString(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // literal_value ::= BOOLEAN_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BooleanLiteralExpression(b); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // literal_value ::= string_literal 
            {
              LiteralExpression< ? > RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringLiteralExpression(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // literal_value ::= FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // literal_value ::= MINUS FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(0.0 - f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // literal_value ::= INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // literal_value ::= MINUS INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(0 - i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr ::= expr QUESTION expr COLON expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		Expression q = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TernaryOperatorExpression(q,y,n); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr ::= expr binary_operator expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,op,r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new UnaryOperatorExpression(new UnaryOperator("!"), e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr ::= literal_value 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > v = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr ::= expr LPAREN RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(f,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr ::= expr LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(f,args); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr ::= expr dot_reference 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,new BinaryOperator("."),r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr ::= CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_list ::= expr_list COMMA expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // special_char ::= RB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '}'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // special_char ::= LB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '{'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // special_char ::= TAB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\t'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // special_char ::= LF_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\n'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // special_char ::= CR_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\r'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // special_char ::= NIL_LITERAL 
            {
              Character RESULT =null;
		 RESULT = null; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // special_char ::= SP_LITERAL 
            {
              Character RESULT =null;
		 RESULT = ' '; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // special_char_tag ::= TAG_LBRACE special_char TAG_RBRACE 
            {
              SpecialCharacterTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new SpecialCharacterTag(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // simple_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("simple_directive",59, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // dir_expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dir_expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dir_expr ::= literal_value 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > e = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dir_expr_list ::= dir_expr_list DIRECTIVE_COMMA dir_expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // dir_expr_list ::= dir_expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // compound_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER DIRECTIVE_COLON dir_expr_list 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i, l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("compound_directive",60, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // directive ::= simple_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // directive ::= compound_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // directive_list ::= directive_list directive 
            {
              List<Directive> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // directive_list ::= directive 
            {
              List<Directive> RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Directive> l = new LinkedList<Directive>(); l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // attribute ::= CAPTURED_IDENTIFIER EQ STRING_LITERAL_BEGIN STRING_PARAMETER_REF STRING_LITERAL_END 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new Attribute(name,new ParameterRef(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // attribute ::= CAPTURED_IDENTIFIER EQ string_literal 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Attribute(name,new StringLiteralExpression(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // attribute_list ::= attribute_list attribute 
            {
              List<Attribute> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> l = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // attribute_list ::= attribute 
            {
              List<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Attribute> l = new LinkedList<Attribute>(); l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // end_param_tag ::= TAG_END_LBRACE PARAM TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("param"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_param_tag",50, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // begin_param_tag ::= TAG_LBRACE PARAM TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginParamTag(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // param_tag ::= TAG_LBRACE PARAM TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginParamTag(null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id,e),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // param_tag ::= begin_param_tag end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // param_tag ::= begin_param_tag content_sequence end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // param_list ::= param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // param_list ::= param_list param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // param_list ::= param_list TEMPLATE_TEXT 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // end_call_tag ::= TAG_END_LBRACE CALL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("call"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_call_tag",49, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // begin_call_tag ::= TAG_LBRACE CALL TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		 RESULT = new BeginCallTag(null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // begin_call_tag ::= TAG_LBRACE CALL attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // begin_call_tag ::= TAG_LBRACE CALL DELTEMPLATE_IDENTIFIER TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // begin_call_tag ::= TAG_LBRACE CALL DELTEMPLATE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // begin_call_tag ::= begin_call_tag TEMPLATE_TEXT 
            {
              BeginCallTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = b; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // call_tag ::= TAG_LBRACE CALL TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		 RESULT = new TemplateCall(new BeginCallTag(null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,att),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // call_tag ::= begin_call_tag end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // call_tag ::= begin_call_tag param_list end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> p = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,p); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_range ::= IN RANGE LPAREN expr_list RPAREN 
            {
              FunctionCall RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier("range"),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_range",53, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for_seq ::= PARAMETER_REF for_range 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		FunctionCall r = (FunctionCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),r.getArgs()); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_seq",52, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // end_for_tag ::= TAG_END_LBRACE FOR TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("for"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_for_tag",48, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // begin_for_tag ::= TAG_LBRACE FOR for_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("for",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_for_tag",40, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_tag ::= TAG_LBRACE FOR TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("for")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_tag ::= begin_for_tag end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_tag ::= begin_for_tag content_sequence end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foreach_seq ::= PARAMETER_REF IN expr 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_seq",51, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ifempty_tag ::= TAG_LBRACE IF_EMPTY TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("ifempty"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("ifempty_tag",34, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // end_foreach_tag ::= TAG_END_LBRACE FOREACH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("foreach"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_foreach_tag",47, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // begin_foreach_tag ::= TAG_LBRACE FOREACH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginIteratorTag("foreach",null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // begin_foreach_tag ::= TAG_LBRACE FOREACH foreach_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("foreach",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // foreach_tag ::= TAG_LBRACE FOREACH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("foreach"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // foreach_tag ::= begin_foreach_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // foreach_tag ::= begin_foreach_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // foreach_tag ::= begin_foreach_tag ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // foreach_tag ::= begin_foreach_tag ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie).append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		List<ContentWrapper< ? >> l1 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l2 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l1).append(ie).append(l2),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // default_tag ::= TAG_LBRACE DEFAULT TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("default"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("default_tag",33, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_tag ::= TAG_LBRACE CASE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("case"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_tag ::= TAG_LBRACE CASE expr_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("case",l,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // end_switch_tag ::= TAG_END_LBRACE SWITCH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("switch"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_switch_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // begin_switch_tag ::= TAG_LBRACE SWITCH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("switch",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // begin_switch_tag ::= TAG_LBRACE SWITCH expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("switch",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // open_switch_tag ::= begin_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // open_switch_tag ::= begin_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // open_switch_tag ::= open_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // open_switch_tag ::= open_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // closing_switch_tag ::= begin_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // closing_switch_tag ::= begin_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // closing_switch_tag ::= open_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // closing_switch_tag ::= open_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // switch_tag ::= TAG_LBRACE SWITCH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("switch"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // switch_tag ::= TAG_LBRACE SWITCH expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("switch",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch_tag ::= begin_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch_tag ::= begin_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // switch_tag ::= open_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_tag ::= open_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_tag ::= closing_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_tag ::= closing_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // end_if_tag ::= TAG_END_LBRACE IF TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("if"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_if_tag",45, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_tag ::= TAG_LBRACE ELSE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("else"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_if_tag ::= TAG_LBRACE ELSE_IF TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("elseif"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_if_tag ::= TAG_LBRACE ELSE_IF expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("elseif",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // begin_if_tag ::= TAG_LBRACE IF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("if",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // begin_if_tag ::= TAG_LBRACE IF expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("if",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // open_if_tag ::= begin_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // open_if_tag ::= begin_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // open_if_tag ::= open_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // open_if_tag ::= open_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // closing_if_tag ::= begin_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // closing_if_tag ::= begin_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // closing_if_tag ::= open_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // closing_if_tag ::= open_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_tag ::= TAG_LBRACE IF TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("if"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_tag ::= TAG_LBRACE IF expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("if",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_tag ::= begin_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_tag ::= begin_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_tag ::= open_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_tag ::= open_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_tag ::= closing_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_tag ::= closing_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // end_msg_tag ::= TAG_END_LBRACE MSG TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("msg"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_msg_tag",44, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // begin_msg_tag ::= TAG_LBRACE MSG TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("msg",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // begin_msg_tag ::= TAG_LBRACE MSG attribute_list TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("msg",att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // msg_tag ::= TAG_LBRACE MSG TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("msg")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // msg_tag ::= begin_msg_tag end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // msg_tag ::= begin_msg_tag content_sequence end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // print_tag ::= TAG_LBRACE PRINT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // print_tag ::= TAG_LBRACE PRINT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // end_literal_tag ::= TAG_END_LBRACE LITERAL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("literal"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_literal_tag",43, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // begin_literal_tag ::= TAG_LBRACE LITERAL TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("literal",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_literal_tag",35, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal_tag ::= begin_literal_tag LITERAL_TEXT end_literal_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,ContentWrapper.create(new CapturedText(text))); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_tag",17, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // end_template_tag ::= TAG_END_LBRACE TEMPLATE TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("template"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_template_tag",12, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(null,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		 RESULT = new BeginTemplateTag(null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginTemplateTag(null,null,null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // template_tag ::= begin_template_tag end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // template_tag ::= begin_template_tag content_sequence end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> c = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // template_doc_buffer ::= DOC_COMMENT_BEGIN 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // template_doc_buffer ::= DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // template_doc_buffer ::= template_doc_buffer LINE_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_IDENTIFIER 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_PARAM_TAG 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_TAG 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_BEGIN 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_EOL 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // template_doc_comment ::= template_doc_buffer DOC_COMMENT_END 
            {
              TemplateDocComment RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateDocComment(buf); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_comment",6, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // template_def ::= template_tag 
            {
              TemplateDeclaration RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(null,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // template_def ::= template_doc_comment template_tag 
            {
              TemplateDeclaration RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateDocComment doc = (TemplateDocComment)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(doc,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // namespace_def ::= TAG_LBRACE NAMESPACE RBRACE_ERROR 
            {
              NamespaceDeclaration RESULT =null;
		 RESULT = new NamespaceDeclaration(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id, att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // non_content_tag ::= special_char_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SpecialCharacterTag tag = (SpecialCharacterTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // non_content_tag ::= print_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag tag = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // content_tag ::= call_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateCall tag = (TemplateCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // content_tag ::= for_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // content_tag ::= foreach_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // content_tag ::= switch_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // content_tag ::= if_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // content_tag ::= msg_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // content_tag ::= literal_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // content_element ::= non_content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // content_element ::= content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // content_element ::= LINE_COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // content_element ::= COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // content_element ::= TEMPLATE_TEXT 
            {
              ContentWrapper< ? > RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new CapturedText(t)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // content_sequence ::= content_sequence content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // content_sequence ::= content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // skip_element ::= IGNORED_TEXT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // skip_element ::= LINE_COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // skip_element ::= COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // skip_element_list ::= skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // skip_element_list ::= skip_element_list skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // template_list ::= template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<TemplateDeclaration> l = new LinkedList<TemplateDeclaration>(); l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // template_list ::= template_list template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // template_list ::= template_list skip_element 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // template_file ::= namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // template_file ::= namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // template_file ::= skip_element_list namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= template_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateFile start_val = (TemplateFile)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		RESULT = start_val;
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SoyParser$parser.done_parsing();
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // template_file ::= skip_element_list namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

