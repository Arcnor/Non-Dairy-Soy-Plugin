
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 21 17:16:48 PDT 2010
//----------------------------------------------------

package net.venaglia.nondairy.soylang.lexer.cupparser;

import java_cup.runtime.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.expr.*;
import net.venaglia.nondairy.soylang.lexer.cupparser.structure.tag.*;
import net.venaglia.nondairy.soylang.lexer.*;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 21 17:16:48 PDT 2010
  */
public class SoyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SoyParser() {super();}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SoyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\327\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\100\003\000\002\100\004\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\006\006\000\002\006" +
    "\005\000\002\012\004\000\002\012\003\000\002\010\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\014\005\000\002\014\004\000\002" +
    "\014\006\000\002\015\006\000\002\015\007\000\002\015" +
    "\006\000\002\015\007\000\002\016\005\000\002\023\005" +
    "\000\002\045\005\000\002\055\005\000\002\037\006\000" +
    "\002\037\007\000\002\037\006\000\002\037\007\000\002" +
    "\024\005\000\002\024\004\000\002\024\005\000\002\046" +
    "\006\000\002\046\005\000\002\056\005\000\002\027\004" +
    "\000\002\027\005\000\002\027\004\000\002\027\005\000" +
    "\002\027\004\000\002\027\005\000\002\027\006\000\002" +
    "\027\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\005\000\002\033\004\000\002\032\005\000\002\032\004" +
    "\000\002\032\005\000\002\032\004\000\002\047\006\000" +
    "\002\047\005\000\002\040\006\000\002\040\005\000\002" +
    "\041\005\000\002\057\005\000\002\030\005\000\002\030" +
    "\004\000\002\030\005\000\002\030\004\000\002\030\005" +
    "\000\002\030\004\000\002\030\006\000\002\030\005\000" +
    "\002\035\005\000\002\035\004\000\002\035\005\000\002" +
    "\035\004\000\002\034\005\000\002\034\004\000\002\034" +
    "\005\000\002\034\004\000\002\050\006\000\002\050\005" +
    "\000\002\060\005\000\002\042\006\000\002\042\005\000" +
    "\002\043\005\000\002\031\007\000\002\031\006\000\002" +
    "\031\006\000\002\031\005\000\002\031\005\000\002\031" +
    "\004\000\002\031\005\000\002\051\006\000\002\051\005" +
    "\000\002\061\005\000\002\044\005\000\002\065\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\052\006\000\002\062\005\000\002\066\004\000\002\067" +
    "\007\000\002\036\005\000\002\036\004\000\002\036\006" +
    "\000\002\036\007\000\002\036\005\000\002\054\004\000" +
    "\002\054\007\000\002\054\006\000\002\054\006\000\002" +
    "\054\005\000\002\063\005\000\002\070\004\000\002\070" +
    "\004\000\002\070\003\000\002\026\005\000\002\026\004" +
    "\000\002\026\010\000\002\026\006\000\002\026\005\000" +
    "\002\053\010\000\002\053\006\000\002\053\005\000\002" +
    "\064\005\000\002\071\003\000\002\071\004\000\002\072" +
    "\005\000\002\072\007\000\002\073\003\000\002\073\004" +
    "\000\002\074\003\000\002\074\003\000\002\076\006\000" +
    "\002\102\003\000\002\102\005\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\075\004\000\002\021" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\101\003\000\002\101\005\000\002" +
    "\103\003\000\002\103\003\000\002\103\006\000\002\103" +
    "\005\000\002\103\004\000\002\103\006\000\002\103\005" +
    "\000\002\103\003\000\002\103\003\000\002\103\004\000" +
    "\002\103\005\000\002\103\005\000\002\103\007\000\002" +
    "\106\004\000\002\106\003\000\002\106\004\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\107\005" +
    "\000\002\107\004\000\002\110\004\000\002\110\004\000" +
    "\002\110\003\000\002\110\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\104\004\000\002" +
    "\104\004\000\002\104\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\005\000\002\013\004\000\002\013\003" +
    "\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\010\005\010\007\004\014\006\001\002\000" +
    "\004\040\u015e\001\002\000\012\005\ufff8\007\ufff8\014\ufff8" +
    "\015\ufff8\001\002\000\014\002\ufff7\005\ufff7\007\ufff7\014" +
    "\ufff7\015\ufff7\001\002\000\010\005\010\007\004\014\006" +
    "\001\002\000\014\002\ufff6\005\ufff6\007\ufff6\014\ufff6\015" +
    "\ufff6\001\002\000\004\002\u0159\001\002\000\012\005\010" +
    "\007\015\014\006\015\017\001\002\000\004\007\015\001" +
    "\002\000\012\004\113\007\103\011\104\014\117\001\002" +
    "\000\004\027\034\001\002\000\012\015\033\016\030\017" +
    "\031\020\032\001\002\000\012\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\001\002\000\014\002\ufffd\005\010\007\015\014" +
    "\006\015\017\001\002\000\014\002\uffe3\005\uffe3\007\uffe3" +
    "\014\uffe3\015\uffe3\001\002\000\014\002\ufffa\005\ufffa\007" +
    "\ufffa\014\ufffa\015\ufffa\001\002\000\012\005\010\007\015" +
    "\014\006\015\017\001\002\000\012\005\ufff9\007\ufff9\014" +
    "\ufff9\015\ufff9\001\002\000\014\002\ufffe\005\010\007\015" +
    "\014\006\015\017\001\002\000\014\002\ufffc\005\ufffc\007" +
    "\ufffc\014\ufffc\015\ufffc\001\002\000\014\002\ufffb\005\ufffb" +
    "\007\ufffb\014\ufffb\015\ufffb\001\002\000\012\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\001\002\000\012\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\001\002\000\004\007\uffe2\001\002\000" +
    "\012\015\uffe1\016\uffe1\017\uffe1\020\uffe1\001\002\000\010" +
    "\024\036\127\040\137\035\001\002\000\010\010\067\012" +
    "\066\025\042\001\002\000\010\010\uff2c\025\uff2c\127\uff2c" +
    "\001\002\000\010\010\044\025\042\127\046\001\002\000" +
    "\004\025\041\001\002\000\010\010\uff2d\025\uff2d\127\uff2d" +
    "\001\002\000\004\104\052\001\002\000\010\010\uff72\012" +
    "\uff72\025\uff72\001\002\000\012\004\uffda\007\uffda\011\uffda" +
    "\014\uffda\001\002\000\006\010\051\025\042\001\002\000" +
    "\004\025\047\001\002\000\010\010\uff2b\025\uff2b\127\uff2b" +
    "\001\002\000\010\010\uff71\012\uff71\025\uff71\001\002\000" +
    "\012\004\uffd9\007\uffd9\011\uffd9\014\uffd9\001\002\000\004" +
    "\072\054\001\002\000\010\010\uff70\012\uff70\025\uff70\001" +
    "\002\000\012\022\056\073\055\074\060\075\057\001\002" +
    "\000\066\010\uff45\012\uff45\025\uff45\061\uff45\063\uff45\076" +
    "\uff45\077\uff45\100\uff45\101\uff45\105\uff45\106\uff45\107\uff45" +
    "\111\uff45\112\uff45\113\uff45\114\uff45\115\uff45\116\uff45\117" +
    "\uff45\120\uff45\122\uff45\123\uff45\124\uff45\125\uff45\127\uff45" +
    "\130\uff45\001\002\000\004\073\065\001\002\000\010\073" +
    "\uff41\074\uff41\075\uff41\001\002\000\010\073\uff42\074\uff42" +
    "\075\uff42\001\002\000\010\073\062\074\064\075\063\001" +
    "\002\000\066\010\uff46\012\uff46\025\uff46\061\uff46\063\uff46" +
    "\076\uff46\077\uff46\100\uff46\101\uff46\105\uff46\106\uff46\107" +
    "\uff46\111\uff46\112\uff46\113\uff46\114\uff46\115\uff46\116\uff46" +
    "\117\uff46\120\uff46\122\uff46\123\uff46\124\uff46\125\uff46\127" +
    "\uff46\130\uff46\001\002\000\010\073\uff43\074\uff43\075\uff43" +
    "\001\002\000\010\073\uff44\074\uff44\075\uff44\001\002\000" +
    "\010\010\uff6f\012\uff6f\025\uff6f\001\002\000\014\002\uffdb" +
    "\005\uffdb\007\uffdb\014\uffdb\015\uffdb\001\002\000\012\004" +
    "\uffd8\007\uffd8\011\uffd8\014\uffd8\001\002\000\006\010\071" +
    "\025\042\001\002\000\012\004\uffd7\007\uffd7\011\uffd7\014" +
    "\uffd7\001\002\000\012\004\113\007\103\011\u0125\014\117" +
    "\001\002\000\012\004\ufff0\007\ufff0\011\ufff0\014\ufff0\001" +
    "\002\000\012\004\113\007\304\011\270\014\117\001\002" +
    "\000\012\004\uffe8\007\uffe8\011\uffe8\014\uffe8\001\002\000" +
    "\012\004\113\007\u0124\011\u0125\014\117\001\002\000\012" +
    "\004\uffef\007\uffef\011\uffef\014\uffef\001\002\000\012\004" +
    "\uffe7\007\uffe7\011\uffe7\014\uffe7\001\002\000\012\004\uffee" +
    "\007\uffee\011\uffee\014\uffee\001\002\000\012\004\113\007" +
    "\u0137\011\u0138\014\117\001\002\000\042\030\320\031\316" +
    "\032\321\033\317\034\327\035\335\036\314\041\332\042" +
    "\315\051\333\052\322\053\313\054\325\055\324\056\330" +
    "\057\326\001\002\000\004\027\u0134\001\002\000\012\004" +
    "\113\007\u0124\011\u0125\014\117\001\002\000\012\004\113" +
    "\007\304\011\270\014\117\001\002\000\014\002\uffdc\005" +
    "\uffdc\007\uffdc\014\uffdc\015\uffdc\001\002\000\012\004\uffea" +
    "\007\uffea\011\uffea\014\uffea\001\002\000\004\006\276\001" +
    "\002\000\012\004\ufff1\007\ufff1\011\ufff1\014\ufff1\001\002" +
    "\000\012\004\ufff3\007\ufff3\011\ufff3\014\ufff3\001\002\000" +
    "\012\004\113\007\103\011\270\014\117\001\002\000\012" +
    "\004\113\007\103\011\104\014\117\001\002\000\012\004" +
    "\113\007\103\011\262\014\117\001\002\000\012\004\ufff2" +
    "\007\ufff2\011\ufff2\014\ufff2\001\002\000\012\004\uffec\007" +
    "\uffec\011\uffec\014\uffec\001\002\000\012\004\ufff5\007\ufff5" +
    "\011\ufff5\014\ufff5\001\002\000\012\004\uffe9\007\uffe9\011" +
    "\uffe9\014\uffe9\001\002\000\012\004\113\007\103\011\253" +
    "\014\117\001\002\000\010\004\127\007\131\011\134\001" +
    "\002\000\012\004\uffed\007\uffed\011\uffed\014\uffed\001\002" +
    "\000\012\004\uffeb\007\uffeb\011\uffeb\014\uffeb\001\002\000" +
    "\010\004\uff84\007\uff84\011\uff84\001\002\000\010\004\250" +
    "\007\131\011\134\001\002\000\004\037\147\001\002\000" +
    "\012\004\113\007\103\011\141\014\117\001\002\000\012" +
    "\004\uff88\007\uff88\011\uff88\014\uff88\001\002\000\004\036" +
    "\136\001\002\000\010\004\uff7c\007\uff7c\011\uff7c\001\002" +
    "\000\004\010\137\001\002\000\012\004\uff7f\007\uff7f\011" +
    "\uff7f\014\uff7f\001\002\000\010\004\uff7a\007\uff7a\011\uff7a" +
    "\001\002\000\004\037\145\001\002\000\012\004\113\007" +
    "\103\011\141\014\117\001\002\000\010\004\uff7b\007\uff7b" +
    "\011\uff7b\001\002\000\012\004\ufff4\007\ufff4\011\ufff4\014" +
    "\ufff4\001\002\000\004\010\146\001\002\000\010\004\uff73" +
    "\007\uff73\011\uff73\001\002\000\010\010\152\012\150\021" +
    "\151\001\002\000\010\004\uff77\007\uff77\011\uff77\001\002" +
    "\000\010\010\155\012\153\114\154\001\002\000\012\004" +
    "\uff74\007\uff74\011\uff74\014\uff74\001\002\000\010\004\uff78" +
    "\007\uff78\011\uff78\001\002\000\030\021\167\025\166\026" +
    "\162\066\161\067\164\070\173\071\165\072\157\076\172" +
    "\110\170\122\156\001\002\000\012\004\uff75\007\uff75\011" +
    "\uff75\014\uff75\001\002\000\006\070\247\071\246\001\002" +
    "\000\010\073\055\074\060\075\057\001\002\000\064\010" +
    "\uff48\012\uff48\061\uff48\063\uff48\076\uff48\077\uff48\100\uff48" +
    "\101\uff48\105\uff48\106\uff48\107\uff48\111\uff48\112\uff48\113" +
    "\uff48\114\uff48\115\uff48\116\uff48\117\uff48\120\uff48\122\uff48" +
    "\123\uff48\124\uff48\125\uff48\127\uff48\130\uff48\001\002\000" +
    "\062\010\uff51\012\uff51\061\uff51\076\uff51\077\uff51\100\uff51" +
    "\101\uff51\105\uff51\106\uff51\107\uff51\111\uff51\112\uff51\113" +
    "\uff51\114\uff51\115\uff51\116\uff51\117\uff51\120\uff51\122\uff51" +
    "\123\uff51\124\uff51\125\uff51\127\uff51\130\uff51\001\002\000" +
    "\004\076\242\001\002\000\062\010\uff52\012\uff52\061\uff52" +
    "\076\uff52\077\uff52\100\uff52\101\uff52\105\uff52\106\uff52\107" +
    "\uff52\111\uff52\112\uff52\113\uff52\114\uff52\115\uff52\116\uff52" +
    "\117\uff52\120\uff52\122\uff52\123\uff52\124\uff52\125\uff52\127" +
    "\uff52\130\uff52\001\002\000\064\010\uff47\012\uff47\061\uff47" +
    "\063\uff47\076\uff47\077\uff47\100\uff47\101\uff47\105\uff47\106" +
    "\uff47\107\uff47\111\uff47\112\uff47\113\uff47\114\uff47\115\uff47" +
    "\116\uff47\117\uff47\120\uff47\122\uff47\123\uff47\124\uff47\125" +
    "\uff47\127\uff47\130\uff47\001\002\000\064\010\uff49\012\uff49" +
    "\061\uff49\063\uff49\076\uff49\077\uff49\100\uff49\101\uff49\105" +
    "\uff49\106\uff49\107\uff49\111\uff49\112\uff49\113\uff49\114\uff49" +
    "\115\uff49\116\uff49\117\uff49\120\uff49\122\uff49\123\uff49\124" +
    "\uff49\125\uff49\127\uff49\130\uff49\001\002\000\062\010\uff59" +
    "\012\uff59\061\uff59\076\uff59\077\uff59\100\uff59\101\uff59\105" +
    "\uff59\106\uff59\107\uff59\111\uff59\112\uff59\113\uff59\114\uff59" +
    "\115\uff59\116\uff59\117\uff59\120\uff59\122\uff59\123\uff59\124" +
    "\uff59\125\uff59\127\uff59\130\uff59\001\002\000\062\010\uff58" +
    "\012\uff58\061\uff58\076\uff58\077\uff58\100\uff58\101\uff58\105" +
    "\uff58\106\uff58\107\uff58\111\uff58\112\uff58\113\uff58\114\uff58" +
    "\115\uff58\116\uff58\117\uff58\120\uff58\122\uff58\123\uff58\124" +
    "\uff58\125\uff58\127\uff58\130\uff58\001\002\000\030\021\167" +
    "\025\166\026\162\066\161\067\164\070\173\071\165\072" +
    "\157\076\172\110\170\122\156\001\002\000\050\010\237" +
    "\012\240\076\207\100\206\105\220\106\210\107\177\111" +
    "\176\112\203\113\200\115\212\116\217\117\202\120\201" +
    "\122\215\123\213\124\214\125\175\127\216\001\002\000" +
    "\030\021\167\025\166\026\162\066\161\067\164\070\173" +
    "\071\165\072\157\076\172\110\170\122\156\001\002\000" +
    "\064\010\uff4b\012\uff4b\061\uff4b\063\uff4b\076\uff4b\077\uff4b" +
    "\100\uff4b\101\uff4b\105\uff4b\106\uff4b\107\uff4b\111\uff4b\112" +
    "\uff4b\113\uff4b\114\uff4b\115\uff4b\116\uff4b\117\uff4b\120\uff4b" +
    "\122\uff4b\123\uff4b\124\uff4b\125\uff4b\127\uff4b\130\uff4b\001" +
    "\002\000\046\076\207\077\204\100\206\105\220\106\210" +
    "\107\177\111\176\112\203\113\200\115\212\116\217\117" +
    "\202\120\201\122\215\123\213\124\214\125\175\127\216" +
    "\001\002\000\030\021\uff3c\025\uff3c\026\uff3c\066\uff3c\067" +
    "\uff3c\070\uff3c\071\uff3c\072\uff3c\076\uff3c\110\uff3c\122\uff3c" +
    "\001\002\000\030\021\uff35\025\uff35\026\uff35\066\uff35\067" +
    "\uff35\070\uff35\071\uff35\072\uff35\076\uff35\110\uff35\122\uff35" +
    "\001\002\000\030\021\uff39\025\uff39\026\uff39\066\uff39\067" +
    "\uff39\070\uff39\071\uff39\072\uff39\076\uff39\110\uff39\122\uff39" +
    "\001\002\000\030\021\167\025\166\026\162\066\161\067" +
    "\164\070\173\071\165\072\157\076\172\110\170\122\156" +
    "\001\002\000\030\021\uff40\025\uff40\026\uff40\066\uff40\067" +
    "\uff40\070\uff40\071\uff40\072\uff40\076\uff40\110\uff40\122\uff40" +
    "\001\002\000\030\021\uff3a\025\uff3a\026\uff3a\066\uff3a\067" +
    "\uff3a\070\uff3a\071\uff3a\072\uff3a\076\uff3a\110\uff3a\122\uff3a" +
    "\001\002\000\030\021\uff34\025\uff34\026\uff34\066\uff34\067" +
    "\uff34\070\uff34\071\uff34\072\uff34\076\uff34\110\uff34\122\uff34" +
    "\001\002\000\062\010\uff4e\012\uff4e\061\uff4e\076\uff4e\077" +
    "\uff4e\100\uff4e\101\uff4e\105\uff4e\106\uff4e\107\uff4e\111\uff4e" +
    "\112\uff4e\113\uff4e\114\uff4e\115\uff4e\116\uff4e\117\uff4e\120" +
    "\uff4e\122\uff4e\123\uff4e\124\uff4e\125\uff4e\127\uff4e\130\uff4e" +
    "\001\002\000\062\010\uff55\012\uff55\061\uff55\076\uff55\077" +
    "\uff55\100\uff55\101\uff55\105\uff55\106\uff55\107\uff55\111\uff55" +
    "\112\uff55\113\uff55\114\uff55\115\uff55\116\uff55\117\uff55\120" +
    "\uff55\122\uff55\123\uff55\124\uff55\125\uff55\127\uff55\130\uff55" +
    "\001\002\000\030\021\167\025\166\026\162\066\161\067" +
    "\164\070\173\071\165\072\157\076\172\110\170\122\156" +
    "\001\002\000\032\021\167\025\166\026\162\066\161\067" +
    "\164\070\173\071\165\072\157\076\172\077\225\110\170" +
    "\122\156\001\002\000\030\021\uff37\025\uff37\026\uff37\066" +
    "\uff37\067\uff37\070\uff37\071\uff37\072\uff37\076\uff37\110\uff37" +
    "\122\uff37\001\002\000\030\021\167\025\166\026\162\066" +
    "\161\067\164\070\173\071\165\072\157\076\172\110\170" +
    "\122\156\001\002\000\030\021\uff38\025\uff38\026\uff38\066" +
    "\uff38\067\uff38\070\uff38\071\uff38\072\uff38\076\uff38\110\uff38" +
    "\122\uff38\001\002\000\030\021\uff3e\025\uff3e\026\uff3e\066" +
    "\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e\076\uff3e\110\uff3e" +
    "\122\uff3e\001\002\000\030\021\uff3d\025\uff3d\026\uff3d\066" +
    "\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\076\uff3d\110\uff3d" +
    "\122\uff3d\001\002\000\030\021\uff3f\025\uff3f\026\uff3f\066" +
    "\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\076\uff3f\110\uff3f" +
    "\122\uff3f\001\002\000\006\025\221\070\222\001\002\000" +
    "\030\021\uff36\025\uff36\026\uff36\066\uff36\067\uff36\070\uff36" +
    "\071\uff36\072\uff36\076\uff36\110\uff36\122\uff36\001\002\000" +
    "\030\021\uff3b\025\uff3b\026\uff3b\066\uff3b\067\uff3b\070\uff3b" +
    "\071\uff3b\072\uff3b\076\uff3b\110\uff3b\122\uff3b\001\002\000" +
    "\062\010\uff33\012\uff33\061\uff33\076\uff33\077\uff33\100\uff33" +
    "\101\uff33\105\uff33\106\uff33\107\uff33\111\uff33\112\uff33\113" +
    "\uff33\114\uff33\115\uff33\116\uff33\117\uff33\120\uff33\122\uff33" +
    "\123\uff33\124\uff33\125\uff33\127\uff33\130\uff33\001\002\000" +
    "\062\010\uff32\012\uff32\061\uff32\076\uff32\077\uff32\100\uff32" +
    "\101\uff32\105\uff32\106\uff32\107\uff32\111\uff32\112\uff32\113" +
    "\uff32\114\uff32\115\uff32\116\uff32\117\uff32\120\uff32\122\uff32" +
    "\123\uff32\124\uff32\125\uff32\127\uff32\130\uff32\001\002\000" +
    "\062\010\uff4f\012\uff4f\061\uff4f\076\207\077\uff4f\100\206" +
    "\101\uff4f\105\220\106\210\107\177\111\176\112\203\113" +
    "\200\114\uff4f\115\212\116\217\117\202\120\201\122\215" +
    "\123\213\124\214\125\175\127\216\130\uff4f\001\002\000" +
    "\006\077\230\130\227\001\002\000\062\010\uff53\012\uff53" +
    "\061\uff53\076\uff53\077\uff53\100\uff53\101\uff53\105\uff53\106" +
    "\uff53\107\uff53\111\uff53\112\uff53\113\uff53\114\uff53\115\uff53" +
    "\116\uff53\117\uff53\120\uff53\122\uff53\123\uff53\124\uff53\125" +
    "\uff53\127\uff53\130\uff53\001\002\000\052\010\uff5b\076\207" +
    "\077\uff5b\100\206\105\220\106\210\107\177\111\176\112" +
    "\203\113\200\115\212\116\217\117\202\120\201\122\215" +
    "\123\213\124\214\125\175\127\216\130\uff5b\001\002\000" +
    "\030\021\167\025\166\026\162\066\161\067\164\070\173" +
    "\071\165\072\157\076\172\110\170\122\156\001\002\000" +
    "\062\010\uff54\012\uff54\061\uff54\076\uff54\077\uff54\100\uff54" +
    "\101\uff54\105\uff54\106\uff54\107\uff54\111\uff54\112\uff54\113" +
    "\uff54\114\uff54\115\uff54\116\uff54\117\uff54\120\uff54\122\uff54" +
    "\123\uff54\124\uff54\125\uff54\127\uff54\130\uff54\001\002\000" +
    "\052\010\uff5a\076\207\077\uff5a\100\206\105\220\106\210" +
    "\107\177\111\176\112\203\113\200\115\212\116\217\117" +
    "\202\120\201\122\215\123\213\124\214\125\175\127\216" +
    "\130\uff5a\001\002\000\046\076\207\100\206\101\233\105" +
    "\220\106\210\107\177\111\176\112\203\113\200\115\212" +
    "\116\217\117\202\120\201\122\215\123\213\124\214\125" +
    "\175\127\216\001\002\000\062\010\uff31\012\uff31\061\uff31" +
    "\076\uff31\077\uff31\100\uff31\101\uff31\105\uff31\106\uff31\107" +
    "\uff31\111\uff31\112\uff31\113\uff31\114\uff31\115\uff31\116\uff31" +
    "\117\uff31\120\uff31\122\uff31\123\uff31\124\uff31\125\uff31\127" +
    "\uff31\130\uff31\001\002\000\046\076\207\100\206\105\220" +
    "\106\210\107\177\111\176\112\203\113\200\114\235\115" +
    "\212\116\217\117\202\120\201\122\215\123\213\124\214" +
    "\125\175\127\216\001\002\000\030\021\167\025\166\026" +
    "\162\066\161\067\164\070\173\071\165\072\157\076\172" +
    "\110\170\122\156\001\002\000\062\010\uff4d\012\uff4d\061" +
    "\uff4d\076\207\077\uff4d\100\206\101\uff4d\105\220\106\210" +
    "\107\177\111\176\112\203\113\uff4d\114\uff4d\115\212\116" +
    "\217\117\202\120\201\122\215\123\213\124\214\125\175" +
    "\127\216\130\uff4d\001\002\000\012\004\uff76\007\uff76\011" +
    "\uff76\014\uff76\001\002\000\010\004\uff79\007\uff79\011\uff79" +
    "\001\002\000\062\010\uff50\012\uff50\061\uff50\076\207\077" +
    "\uff50\100\206\101\uff50\105\uff50\106\uff50\107\uff50\111\uff50" +
    "\112\uff50\113\uff50\114\uff50\115\uff50\116\uff50\117\uff50\120" +
    "\uff50\122\uff50\123\uff50\124\uff50\125\uff50\127\216\130\uff50" +
    "\001\002\000\032\021\167\025\166\026\162\066\161\067" +
    "\164\070\173\071\165\072\157\076\172\077\244\110\170" +
    "\122\156\001\002\000\006\077\245\130\227\001\002\000" +
    "\062\010\uff56\012\uff56\061\uff56\076\uff56\077\uff56\100\uff56" +
    "\101\uff56\105\uff56\106\uff56\107\uff56\111\uff56\112\uff56\113" +
    "\uff56\114\uff56\115\uff56\116\uff56\117\uff56\120\uff56\122\uff56" +
    "\123\uff56\124\uff56\125\uff56\127\uff56\130\uff56\001\002\000" +
    "\062\010\uff57\012\uff57\061\uff57\076\uff57\077\uff57\100\uff57" +
    "\101\uff57\105\uff57\106\uff57\107\uff57\111\uff57\112\uff57\113" +
    "\uff57\114\uff57\115\uff57\116\uff57\117\uff57\120\uff57\122\uff57" +
    "\123\uff57\124\uff57\125\uff57\127\uff57\130\uff57\001\002\000" +
    "\064\010\uff4a\012\uff4a\061\uff4a\063\uff4a\076\uff4a\077\uff4a" +
    "\100\uff4a\101\uff4a\105\uff4a\106\uff4a\107\uff4a\111\uff4a\112" +
    "\uff4a\113\uff4a\114\uff4a\115\uff4a\116\uff4a\117\uff4a\120\uff4a" +
    "\122\uff4a\123\uff4a\124\uff4a\125\uff4a\127\uff4a\130\uff4a\001" +
    "\002\000\064\010\uff4c\012\uff4c\061\uff4c\063\uff4c\076\uff4c" +
    "\077\uff4c\100\uff4c\101\uff4c\105\uff4c\106\uff4c\107\uff4c\111" +
    "\uff4c\112\uff4c\113\uff4c\114\uff4c\115\uff4c\116\uff4c\117\uff4c" +
    "\120\uff4c\122\uff4c\123\uff4c\124\uff4c\125\uff4c\127\uff4c\130" +
    "\uff4c\001\002\000\010\004\uff7e\007\uff7e\011\uff7e\001\002" +
    "\000\012\004\uff89\007\uff89\011\uff89\014\uff89\001\002\000" +
    "\010\004\uff7d\007\uff7d\011\uff7d\001\002\000\004\035\257" +
    "\001\002\000\012\004\113\007\103\011\253\014\117\001" +
    "\002\000\012\004\uff8f\007\uff8f\011\uff8f\014\uff8f\001\002" +
    "\000\012\004\uff90\007\uff90\011\uff90\014\uff90\001\002\000" +
    "\004\010\260\001\002\000\012\004\uff8c\007\uff8c\011\uff8c" +
    "\014\uff8c\001\002\000\012\004\uffcd\007\uffcd\011\uffcd\014" +
    "\uffcd\001\002\000\004\031\265\001\002\000\012\004\113" +
    "\007\103\011\262\014\117\001\002\000\012\004\uffce\007" +
    "\uffce\011\uffce\014\uffce\001\002\000\004\010\266\001\002" +
    "\000\012\004\uffc9\007\uffc9\011\uffc9\014\uffc9\001\002\000" +
    "\014\002\uffdd\005\uffdd\007\uffdd\014\uffdd\015\uffdd\001\002" +
    "\000\004\033\274\001\002\000\012\004\uffb1\007\uffb1\011" +
    "\uffb1\014\uffb1\001\002\000\012\004\113\007\103\011\270" +
    "\014\117\001\002\000\012\004\uffb2\007\uffb2\011\uffb2\014" +
    "\uffb2\001\002\000\004\010\275\001\002\000\012\004\uffa0" +
    "\007\uffa0\011\uffa0\014\uffa0\001\002\000\004\011\300\001" +
    "\002\000\012\004\uffd5\007\uffd5\011\uffd5\014\uffd5\001\002" +
    "\000\004\030\301\001\002\000\004\010\302\001\002\000" +
    "\012\004\uffd3\007\uffd3\011\uffd3\014\uffd3\001\002\000\012" +
    "\004\uffa9\007\uffa9\011\uffa9\014\uffa9\001\002\000\046\030" +
    "\320\031\316\032\321\033\317\034\327\035\335\036\314" +
    "\041\332\042\315\045\331\046\334\051\333\052\322\053" +
    "\313\054\325\055\324\056\330\057\326\001\002\000\012" +
    "\004\uffaf\007\uffaf\011\uffaf\014\uffaf\001\002\000\012\004" +
    "\113\007\304\011\270\014\117\001\002\000\012\004\uffa5" +
    "\007\uffa5\011\uffa5\014\uffa5\001\002\000\012\004\uffaa\007" +
    "\uffaa\011\uffaa\014\uffaa\001\002\000\012\004\uffb0\007\uffb0" +
    "\011\uffb0\014\uffb0\001\002\000\012\004\uffa6\007\uffa6\011" +
    "\uffa6\014\uffa6\001\002\000\004\010\uff60\001\002\000\012" +
    "\010\u011b\012\u0119\024\u011a\025\042\001\002\000\030\021" +
    "\167\025\166\026\162\066\161\067\164\070\173\071\165" +
    "\072\157\076\172\110\170\122\156\001\002\000\010\010" +
    "\u0112\012\u0111\025\042\001\002\000\034\010\u010c\012\u010d" +
    "\021\167\025\166\026\162\066\161\067\164\070\173\071" +
    "\165\072\157\076\172\110\170\122\156\001\002\000\004" +
    "\010\u010b\001\002\000\034\010\u0106\012\u0107\021\167\025" +
    "\166\026\162\066\161\067\164\070\173\071\165\072\157" +
    "\076\172\110\170\122\156\001\002\000\004\010\uff61\001" +
    "\002\000\004\010\u0105\001\002\000\004\010\uff5e\001\002" +
    "\000\004\010\uff5f\001\002\000\004\010\uff5c\001\002\000" +
    "\010\010\u0101\012\376\021\377\001\002\000\004\010\uff5d" +
    "\001\002\000\032\010\373\021\167\025\166\026\162\066" +
    "\161\067\164\070\173\071\165\072\157\076\172\110\170" +
    "\122\156\001\002\000\030\021\167\025\166\026\162\066" +
    "\161\067\164\070\173\071\165\072\157\076\172\110\170" +
    "\122\156\001\002\000\004\010\uff62\001\002\000\004\010" +
    "\350\001\002\000\006\012\336\021\337\001\002\000\012" +
    "\004\uff8e\007\uff8e\011\uff8e\014\uff8e\001\002\000\004\064" +
    "\342\001\002\000\004\010\341\001\002\000\012\004\uff8d" +
    "\007\uff8d\011\uff8d\014\uff8d\001\002\000\004\065\344\001" +
    "\002\000\004\010\uff8b\001\002\000\004\076\345\001\002" +
    "\000\030\021\167\025\166\026\162\066\161\067\164\070" +
    "\173\071\165\072\157\076\172\110\170\122\156\001\002" +
    "\000\006\077\347\130\227\001\002\000\004\010\uff8a\001" +
    "\002\000\012\004\uff9d\007\uff9d\011\uff9d\014\uff9d\001\002" +
    "\000\050\010\352\061\356\076\207\100\206\105\220\106" +
    "\210\107\177\111\176\112\203\113\200\115\212\116\217" +
    "\117\202\120\201\122\215\123\213\124\214\125\175\127" +
    "\216\001\002\000\012\004\uffd2\007\uffd2\011\uffd2\014\uffd2" +
    "\001\002\000\006\010\uff6c\061\uff6c\001\002\000\006\010" +
    "\371\061\356\001\002\000\006\010\uff6e\061\uff6e\001\002" +
    "\000\004\060\360\001\002\000\006\010\uff6b\061\uff6b\001" +
    "\002\000\010\010\uff64\061\uff64\062\361\001\002\000\020" +
    "\021\366\066\362\067\164\070\173\071\165\072\157\122" +
    "\156\001\002\000\010\010\uff66\061\uff66\063\uff66\001\002" +
    "\000\010\010\uff67\061\uff67\063\uff67\001\002\000\010\010" +
    "\uff6a\061\uff6a\063\367\001\002\000\010\010\uff69\061\uff69" +
    "\063\uff69\001\002\000\010\010\uff65\061\uff65\063\uff65\001" +
    "\002\000\020\021\366\066\362\067\164\070\173\071\165" +
    "\072\157\122\156\001\002\000\010\010\uff68\061\uff68\063" +
    "\uff68\001\002\000\012\004\uffd1\007\uffd1\011\uffd1\014\uffd1" +
    "\001\002\000\006\010\uff6d\061\uff6d\001\002\000\012\004" +
    "\uff9e\007\uff9e\011\uff9e\014\uff9e\001\002\000\006\010\375" +
    "\130\227\001\002\000\012\004\uff9f\007\uff9f\011\uff9f\014" +
    "\uff9f\001\002\000\012\004\uff96\007\uff96\011\uff96\014\uff96" +
    "\001\002\000\004\064\u0103\001\002\000\004\010\u0102\001" +
    "\002\000\012\004\uff94\007\uff94\011\uff94\014\uff94\001\002" +
    "\000\012\004\uff95\007\uff95\011\uff95\014\uff95\001\002\000" +
    "\030\021\167\025\166\026\162\066\161\067\164\070\173" +
    "\071\165\072\157\076\172\110\170\122\156\001\002\000" +
    "\046\010\uff91\076\207\100\206\105\220\106\210\107\177" +
    "\111\176\112\203\113\200\115\212\116\217\117\202\120" +
    "\201\122\215\123\213\124\214\125\175\127\216\001\002" +
    "\000\012\004\uff63\007\uff63\011\uff63\014\uff63\001\002\000" +
    "\012\004\uffb7\007\uffb7\011\uffb7\014\uffb7\001\002\000\012" +
    "\004\uffc1\007\uffc1\011\uffc1\014\uffc1\001\002\000\050\010" +
    "\u0109\012\u010a\076\207\100\206\105\220\106\210\107\177" +
    "\111\176\112\203\113\200\115\212\116\217\117\202\120" +
    "\201\122\215\123\213\124\214\125\175\127\216\001\002" +
    "\000\012\004\uffb8\007\uffb8\011\uffb8\014\uffb8\001\002\000" +
    "\012\004\uffc2\007\uffc2\011\uffc2\014\uffc2\001\002\000\004" +
    "\006\uffd4\001\002\000\012\004\uffa1\007\uffa1\011\uffa1\014" +
    "\uffa1\001\002\000\012\004\uffab\007\uffab\011\uffab\014\uffab" +
    "\001\002\000\050\010\u010f\012\u0110\076\207\100\206\105" +
    "\220\106\210\107\177\111\176\112\203\113\200\115\212" +
    "\116\217\117\202\120\201\122\215\123\213\124\214\125" +
    "\175\127\216\001\002\000\012\004\uffa2\007\uffa2\011\uffa2" +
    "\014\uffa2\001\002\000\012\004\uffac\007\uffac\011\uffac\014" +
    "\uffac\001\002\000\012\004\uffcc\007\uffcc\011\uffcc\014\uffcc" +
    "\001\002\000\012\004\uffca\007\uffca\011\uffca\014\uffca\001" +
    "\002\000\006\010\u0114\025\042\001\002\000\012\004\uffcb" +
    "\007\uffcb\011\uffcb\014\uffcb\001\002\000\050\010\u0116\061" +
    "\356\076\207\100\206\105\220\106\210\107\177\111\176" +
    "\112\203\113\200\115\212\116\217\117\202\120\201\122" +
    "\215\123\213\124\214\125\175\127\216\001\002\000\012" +
    "\004\uffd0\007\uffd0\011\uffd0\014\uffd0\001\002\000\006\010" +
    "\u0118\061\356\001\002\000\012\004\uffcf\007\uffcf\011\uffcf" +
    "\014\uffcf\001\002\000\012\004\uff85\007\uff85\011\uff85\014" +
    "\uff85\001\002\000\010\010\u011f\012\u011e\025\042\001\002" +
    "\000\010\004\uff80\007\uff80\011\uff80\001\002\000\006\010" +
    "\u011d\025\042\001\002\000\010\004\uff81\007\uff81\011\uff81" +
    "\001\002\000\012\004\uff87\007\uff87\011\uff87\014\uff87\001" +
    "\002\000\010\004\uff82\007\uff82\011\uff82\001\002\000\010" +
    "\010\u0122\012\u0121\025\042\001\002\000\012\004\uff86\007" +
    "\uff86\011\uff86\014\uff86\001\002\000\010\004\uff83\007\uff83" +
    "\011\uff83\001\002\000\012\004\uffbf\007\uffbf\011\uffbf\014" +
    "\uffbf\001\002\000\046\030\320\031\316\032\321\033\317" +
    "\034\327\035\335\036\314\041\332\042\315\043\u012f\044" +
    "\u012e\051\333\052\322\053\313\054\325\055\324\056\330" +
    "\057\326\001\002\000\004\032\u012c\001\002\000\012\004" +
    "\uffc6\007\uffc6\011\uffc6\014\uffc6\001\002\000\012\004\113" +
    "\007\u0124\011\u0125\014\117\001\002\000\012\004\uffbb\007" +
    "\uffbb\011\uffbb\014\uffbb\001\002\000\012\004\uffc0\007\uffc0" +
    "\011\uffc0\014\uffc0\001\002\000\012\004\uffc5\007\uffc5\011" +
    "\uffc5\014\uffc5\001\002\000\012\004\uffbc\007\uffbc\011\uffbc" +
    "\014\uffbc\001\002\000\004\010\u012d\001\002\000\012\004" +
    "\uffb3\007\uffb3\011\uffb3\014\uffb3\001\002\000\004\010\u0133" +
    "\001\002\000\032\010\u0130\021\167\025\166\026\162\066" +
    "\161\067\164\070\173\071\165\072\157\076\172\110\170" +
    "\122\156\001\002\000\012\004\uffb5\007\uffb5\011\uffb5\014" +
    "\uffb5\001\002\000\046\010\u0132\076\207\100\206\105\220" +
    "\106\210\107\177\111\176\112\203\113\200\115\212\116" +
    "\217\117\202\120\201\122\215\123\213\124\214\125\175" +
    "\127\216\001\002\000\012\004\uffb6\007\uffb6\011\uffb6\014" +
    "\uffb6\001\002\000\012\004\uffb4\007\uffb4\011\uffb4\014\uffb4" +
    "\001\002\000\004\010\u0135\001\002\000\014\002\uffd6\005" +
    "\uffd6\007\uffd6\014\uffd6\015\uffd6\001\002\000\012\004\uff97" +
    "\007\uff97\011\uff97\014\uff97\001\002\000\044\030\320\031" +
    "\316\032\321\033\317\034\327\035\335\036\314\041\332" +
    "\042\315\047\u0145\051\333\052\322\053\313\054\325\055" +
    "\324\056\330\057\326\001\002\000\004\034\u0143\001\002" +
    "\000\012\004\113\007\u0137\011\u0138\014\117\001\002\000" +
    "\012\004\113\007\103\011\u0138\014\117\001\002\000\012" +
    "\004\uff99\007\uff99\011\uff99\014\uff99\001\002\000\012\004" +
    "\113\007\103\011\u0138\014\117\001\002\000\012\004\uff9a" +
    "\007\uff9a\011\uff9a\014\uff9a\001\002\000\012\004\uff98\007" +
    "\uff98\011\uff98\014\uff98\001\002\000\012\004\113\007\103" +
    "\011\u0138\014\117\001\002\000\012\004\uff9b\007\uff9b\011" +
    "\uff9b\014\uff9b\001\002\000\012\004\113\007\103\011\u0138" +
    "\014\117\001\002\000\012\004\uff9c\007\uff9c\011\uff9c\014" +
    "\uff9c\001\002\000\004\010\u0144\001\002\000\012\004\uff93" +
    "\007\uff93\011\uff93\014\uff93\001\002\000\004\010\u0146\001" +
    "\002\000\012\004\uff92\007\uff92\011\uff92\014\uff92\001\002" +
    "\000\012\004\uffbd\007\uffbd\011\uffbd\014\uffbd\001\002\000" +
    "\012\004\uffc4\007\uffc4\011\uffc4\014\uffc4\001\002\000\012" +
    "\004\113\007\u0124\011\u0125\014\117\001\002\000\012\004" +
    "\uffb9\007\uffb9\011\uffb9\014\uffb9\001\002\000\012\004\uffbe" +
    "\007\uffbe\011\uffbe\014\uffbe\001\002\000\012\004\uffc3\007" +
    "\uffc3\011\uffc3\014\uffc3\001\002\000\012\004\uffba\007\uffba" +
    "\011\uffba\014\uffba\001\002\000\012\004\uffa7\007\uffa7\011" +
    "\uffa7\014\uffa7\001\002\000\012\004\uffad\007\uffad\011\uffad" +
    "\014\uffad\001\002\000\012\004\113\007\304\011\270\014" +
    "\117\001\002\000\012\004\uffa3\007\uffa3\011\uffa3\014\uffa3" +
    "\001\002\000\012\004\uffa8\007\uffa8\011\uffa8\014\uffa8\001" +
    "\002\000\012\004\uffae\007\uffae\011\uffae\014\uffae\001\002" +
    "\000\012\004\uffa4\007\uffa4\011\uffa4\014\uffa4\001\002\000" +
    "\012\004\uffc8\007\uffc8\011\uffc8\014\uffc8\001\002\000\012" +
    "\004\113\007\103\011\u0125\014\117\001\002\000\012\004" +
    "\uffc7\007\uffc7\011\uffc7\014\uffc7\001\002\000\014\002\uffe4" +
    "\005\uffe4\007\uffe4\014\uffe4\015\uffe4\001\002\000\004\002" +
    "\000\001\002\000\012\005\010\007\015\014\006\015\017" +
    "\001\002\000\014\002\uffff\005\010\007\015\014\006\015" +
    "\017\001\002\000\012\005\010\007\015\014\006\015\017" +
    "\001\002\000\014\002\001\005\010\007\015\014\006\015" +
    "\017\001\002\000\006\023\u015f\136\u0160\001\002\000\004" +
    "\010\u0161\001\002\000\012\005\uffe5\007\uffe5\014\uffe5\015" +
    "\uffe5\001\002\000\012\005\uffe6\007\uffe6\014\uffe6\015\uffe6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\012\002\010\004\006\005\004\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\023\006\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\017\004\022\005\004\010\012" +
    "\011\015\012\021\014\020\015\013\001\001\000\006\014" +
    "\u0157\015\013\001\001\000\064\016\106\017\111\020\072" +
    "\021\077\023\076\024\100\025\107\027\124\030\117\031" +
    "\125\032\104\033\071\034\105\035\113\036\121\037\074" +
    "\045\110\046\115\047\075\050\073\051\101\052\122\054" +
    "\123\077\120\100\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\025\010\012\011" +
    "\015\012\026\014\020\015\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\024\005\023\010\012\011" +
    "\015\012\021\014\020\015\013\001\001\000\002\001\001" +
    "\000\016\005\025\010\012\011\015\012\026\014\020\015" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\036\001\001\000\006\071\067\072\042" +
    "\001\001\000\002\001\001\000\006\071\044\072\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\052\001\001\000\002\001" +
    "\001\000\004\110\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\047\001\001\000\002\001\001\000\064\017\111" +
    "\020\072\021\077\023\076\024\100\025\107\027\124\030" +
    "\117\031\125\032\104\033\071\034\105\035\113\036\121" +
    "\037\074\045\110\046\115\047\075\050\073\051\101\052" +
    "\122\054\123\057\u0154\077\120\100\u0155\001\001\000\002" +
    "\001\001\000\070\017\111\020\072\021\077\023\076\024" +
    "\100\025\107\027\124\030\117\031\125\032\104\033\071" +
    "\034\105\035\113\036\121\037\074\042\u0150\043\u014d\045" +
    "\110\046\115\047\075\050\073\051\101\052\122\054\123" +
    "\060\u014e\077\120\100\u014f\001\001\000\002\001\001\000" +
    "\070\017\111\020\072\021\077\023\076\024\100\025\107" +
    "\027\124\030\117\031\125\032\104\033\071\034\105\035" +
    "\113\036\121\037\074\040\u0149\041\u0146\045\110\046\115" +
    "\047\075\050\073\051\101\052\122\054\123\057\u0147\077" +
    "\120\100\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\017\111\020\072\021\077\023" +
    "\076\024\100\025\107\027\124\030\117\031\125\032\104" +
    "\033\071\034\105\035\113\036\121\037\074\044\u0139\045" +
    "\110\046\115\047\075\050\073\051\101\052\122\054\123" +
    "\061\u0135\077\120\100\u0138\001\001\000\004\022\322\001" +
    "\001\000\002\001\001\000\070\017\111\020\072\021\077" +
    "\023\076\024\100\025\107\027\124\030\117\031\125\032" +
    "\104\033\071\034\105\035\113\036\121\037\074\040\u0127" +
    "\041\u0122\045\110\046\115\047\075\050\073\051\101\052" +
    "\122\054\123\057\u0125\077\120\100\u0126\001\001\000\070" +
    "\017\111\020\072\021\077\023\076\024\100\025\107\027" +
    "\124\030\117\031\125\032\104\033\071\034\105\035\113" +
    "\036\121\037\074\042\306\043\302\045\110\046\115\047" +
    "\075\050\073\051\101\052\122\054\123\060\304\077\120" +
    "\100\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\017\111\020\072\021\077\023\076\024\100\025\107\027" +
    "\124\030\117\031\125\032\104\033\071\034\105\035\113" +
    "\036\121\037\074\045\110\046\115\047\075\050\073\051" +
    "\101\052\122\054\123\060\270\077\120\100\271\001\001" +
    "\000\062\016\266\017\111\020\072\021\077\023\076\024" +
    "\100\025\107\027\124\030\117\031\125\032\104\033\071" +
    "\034\105\035\113\036\121\037\074\045\110\046\115\047" +
    "\075\050\073\051\101\052\122\054\123\077\143\001\001" +
    "\000\064\017\111\020\072\021\077\023\076\024\100\025" +
    "\107\027\124\030\117\031\125\032\104\033\071\034\105" +
    "\035\113\036\121\037\074\045\110\046\115\047\075\050" +
    "\073\051\101\052\122\054\123\056\260\077\120\100\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\017\111\020\072\021\077" +
    "\023\076\024\100\025\107\027\124\030\117\031\125\032" +
    "\104\033\071\034\105\035\113\036\121\037\074\045\110" +
    "\046\115\047\075\050\073\051\101\052\122\054\123\062" +
    "\254\077\120\100\253\001\001\000\012\026\134\053\131" +
    "\063\132\070\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\251\053\131\063\250" +
    "\001\001\000\002\001\001\000\064\017\111\020\072\021" +
    "\077\023\076\024\100\025\107\027\124\030\117\031\125" +
    "\032\104\033\071\034\105\035\113\036\121\037\074\045" +
    "\110\046\115\047\075\050\073\051\101\052\122\054\123" +
    "\064\137\077\120\100\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\017" +
    "\111\020\072\021\077\023\076\024\100\025\107\027\124" +
    "\030\117\031\125\032\104\033\071\034\105\035\113\036" +
    "\121\037\074\045\110\046\115\047\075\050\073\051\101" +
    "\052\122\054\123\064\142\077\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\103\170\106\162" +
    "\107\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\103\240\106\162\107\157\001\001\000\006\104\204\111" +
    "\210\001\001\000\010\103\173\106\162\107\157\001\001" +
    "\000\002\001\001\000\006\104\204\111\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\103\233\106\162\107\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\103\231\106\162\107\157\001\001\000" +
    "\012\101\223\103\225\106\162\107\157\001\001\000\002" +
    "\001\001\000\010\103\222\106\162\107\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\104\204" +
    "\111\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\104\204\111\210\001\001\000\010\103\230\106\162" +
    "\107\157\001\001\000\002\001\001\000\006\104\204\111" +
    "\210\001\001\000\006\104\204\111\210\001\001\000\002" +
    "\001\001\000\006\104\204\111\210\001\001\000\010\103" +
    "\235\106\162\107\157\001\001\000\006\104\204\111\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\104" +
    "\204\111\210\001\001\000\012\101\242\103\225\106\162" +
    "\107\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\017\111\020\072\021\077\023\076\024\100" +
    "\025\107\027\124\030\117\031\125\032\104\033\071\034" +
    "\105\035\113\036\121\037\074\045\110\046\115\047\075" +
    "\050\073\051\101\052\122\054\123\062\255\077\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\017\111\020\072\021\077\023\076\024\100\025\107" +
    "\027\124\030\117\031\125\032\104\033\071\034\105\035" +
    "\113\036\121\037\074\045\110\046\115\047\075\050\073" +
    "\051\101\052\122\054\123\056\263\077\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\017" +
    "\111\020\072\021\077\023\076\024\100\025\107\027\124" +
    "\030\117\031\125\032\104\033\071\034\105\035\113\036" +
    "\121\037\074\045\110\046\115\047\075\050\073\051\101" +
    "\052\122\054\123\060\272\077\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\322" +
    "\001\001\000\002\001\001\000\066\017\111\020\072\021" +
    "\077\023\076\024\100\025\107\027\124\030\117\031\125" +
    "\032\104\033\071\034\105\035\113\036\121\037\074\042" +
    "\311\043\307\045\110\046\115\047\075\050\073\051\101" +
    "\052\122\054\123\060\310\077\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\071\u011b\072\042\001\001\000" +
    "\010\103\u0114\106\162\107\157\001\001\000\006\071\u0112" +
    "\072\042\001\001\000\010\103\u010d\106\162\107\157\001" +
    "\001\000\002\001\001\000\010\103\u0107\106\162\107\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\377" +
    "\001\001\000\002\001\001\000\012\101\373\103\225\106" +
    "\162\107\157\001\001\000\010\103\350\106\162\107\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\337\001\001\000\002\001\001\000\004\067\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\101\345\103\225" +
    "\106\162\107\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\073\353\074\354\075\356" +
    "\076\352\104\204\111\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\074\371\075\356\076\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\102\363\105\364\106\362\107\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\105\367" +
    "\106\362\107\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\103\u0103\106\162\107\157\001\001\000\006\104\204\111" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\104\204\111\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\104\204\111\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\047\001\001\000\002\001\001\000" +
    "\016\073\u0116\074\354\075\356\076\352\104\204\111\210" +
    "\001\001\000\002\001\001\000\010\074\371\075\356\076" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\u011f\072\042\001\001\000\002\001\001\000\004\072" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\017\111\020" +
    "\072\021\077\023\076\024\100\025\107\027\124\030\117" +
    "\031\125\032\104\033\071\034\105\035\113\036\121\037" +
    "\074\040\u012a\041\u0128\045\110\046\115\047\075\050\073" +
    "\051\101\052\122\054\123\057\u0129\077\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\103\u0130\106\162\107\157\001\001\000\002" +
    "\001\001\000\006\104\204\111\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\322\001\001\000\002\001" +
    "\001\000\064\017\111\020\072\021\077\023\076\024\100" +
    "\025\107\027\124\030\117\031\125\032\104\033\071\034" +
    "\105\035\113\036\121\037\074\044\u013e\045\110\046\115" +
    "\047\075\050\073\051\101\052\122\054\123\061\u013d\077" +
    "\143\001\001\000\064\017\111\020\072\021\077\023\076" +
    "\024\100\025\107\027\124\030\117\031\125\032\104\033" +
    "\071\034\105\035\113\036\121\037\074\045\110\046\115" +
    "\047\075\050\073\051\101\052\122\054\123\061\u013a\077" +
    "\120\100\u013b\001\001\000\002\001\001\000\062\017\111" +
    "\020\072\021\077\023\076\024\100\025\107\027\124\030" +
    "\117\031\125\032\104\033\071\034\105\035\113\036\121" +
    "\037\074\045\110\046\115\047\075\050\073\051\101\052" +
    "\122\054\123\061\u013c\077\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\017\111\020\072\021\077\023" +
    "\076\024\100\025\107\027\124\030\117\031\125\032\104" +
    "\033\071\034\105\035\113\036\121\037\074\045\110\046" +
    "\115\047\075\050\073\051\101\052\122\054\123\061\u013f" +
    "\077\120\100\u0140\001\001\000\002\001\001\000\062\017" +
    "\111\020\072\021\077\023\076\024\100\025\107\027\124" +
    "\030\117\031\125\032\104\033\071\034\105\035\113\036" +
    "\121\037\074\045\110\046\115\047\075\050\073\051\101" +
    "\052\122\054\123\061\u0141\077\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\017\111\020\072\021\077\023\076\024\100\025\107" +
    "\027\124\030\117\031\125\032\104\033\071\034\105\035" +
    "\113\036\121\037\074\040\u014c\041\u014a\045\110\046\115" +
    "\047\075\050\073\051\101\052\122\054\123\057\u014b\077" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\017\111\020\072\021\077\023\076\024\100" +
    "\025\107\027\124\030\117\031\125\032\104\033\071\034" +
    "\105\035\113\036\121\037\074\042\u0153\043\u0151\045\110" +
    "\046\115\047\075\050\073\051\101\052\122\054\123\060" +
    "\u0152\077\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\017\111\020\072\021\077\023\076\024\100\025\107" +
    "\027\124\030\117\031\125\032\104\033\071\034\105\035" +
    "\113\036\121\037\074\045\110\046\115\047\075\050\073" +
    "\051\101\052\122\054\123\057\u0156\077\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\u015a\004\u015b\005\004\010\012\011\015\012\021\014" +
    "\020\015\013\001\001\000\016\005\025\010\012\011\015" +
    "\012\026\014\020\015\013\001\001\000\020\003\u015c\005" +
    "\023\010\012\011\015\012\021\014\020\015\013\001\001" +
    "\000\016\005\025\010\012\011\015\012\026\014\020\015" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SoyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SoyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SoyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SoyParser$actions {
  private final SoyParser parser;

  /** Constructor */
  CUP$SoyParser$actions(SoyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SoyParser$do_action(
    int                        CUP$SoyParser$act_num,
    java_cup.runtime.lr_parser CUP$SoyParser$parser,
    java.util.Stack            CUP$SoyParser$stack,
    int                        CUP$SoyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SoyParser$result;

      /* select the action based on the action number */
      switch (CUP$SoyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // template_ident ::= template_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = t + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // template_ident ::= TEMPLATE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // template_ident ::= DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_ident",9, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // namespace_ident ::= namespace_ident DOT CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String ns = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ns + "." + id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // namespace_ident ::= NAMESPACE_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // namespace_ident ::= CAPTURED_IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = id; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_ident",5, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // dot_reference ::= LBRACK expr RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // dot_reference ::= DOT INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // dot_reference ::= DOT CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dot_reference",66, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // binary_operator ::= OR 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("|"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // binary_operator ::= AND 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("&"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // binary_operator ::= GTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // binary_operator ::= GT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator(">"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // binary_operator ::= LTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // binary_operator ::= LT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("<"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // binary_operator ::= NOTEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("!="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // binary_operator ::= EQEQ 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("=="); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // binary_operator ::= MOD 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("%"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // binary_operator ::= DIV 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("/"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // binary_operator ::= MULT 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("*"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // binary_operator ::= MINUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("-"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // binary_operator ::= PLUS 
            {
              BinaryOperator RESULT =null;
		 RESULT = new BinaryOperator("+"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("binary_operator",71, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // string_literal_buf ::= STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // string_literal_buf ::= STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringBuilder(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // string_literal_buf ::= string_literal_buf STRING_LITERAL_ESCAPE 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // string_literal_buf ::= string_literal_buf STRING_LITERAL 
            {
              StringBuilder RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(s); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal_buf",70, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // string_literal ::= STRING_LITERAL_BEGIN STRING_LITERAL_END 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // string_literal ::= STRING_LITERAL_BEGIN string_literal_buf STRING_LITERAL_END 
            {
              String RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		StringBuilder buf = (StringBuilder)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = buf.toString(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("string_literal",69, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // literal_value ::= BOOLEAN_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BooleanLiteralExpression(b); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // literal_value ::= string_literal 
            {
              LiteralExpression< ? > RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new StringLiteralExpression(s); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // literal_value ::= FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // literal_value ::= MINUS FLOATING_POINT_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new FloatLiteralExpression(0.0 - f); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // literal_value ::= INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // literal_value ::= MINUS INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IntegerLiteralExpression(0 - i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_value",68, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr ::= expr QUESTION expr COLON expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		Expression q = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression y = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression n = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TernaryOperatorExpression(q,y,n); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr ::= expr binary_operator expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,op,r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new UnaryOperatorExpression(new UnaryOperator("!"), e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr ::= literal_value 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > v = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr ::= expr LPAREN RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(f,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr ::= expr LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(f,args); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr ::= expr dot_reference 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new BinaryOperatorExpression(l,new BinaryOperator("."),r); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr ::= CAPTURED_FUNCTION_IDENTIFIER LPAREN expr_list RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier(id),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr ::= CAPTURED_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new CapturedIdentifier(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_list ::= expr_list COMMA expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_list ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("expr_list",63, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // special_char ::= RB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '}'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // special_char ::= LB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '{'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // special_char ::= TAB_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\t'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // special_char ::= LF_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\n'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // special_char ::= CR_LITERAL 
            {
              Character RESULT =null;
		 RESULT = '\r'; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // special_char ::= NIL_LITERAL 
            {
              Character RESULT =null;
		 RESULT = null; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // special_char ::= SP_LITERAL 
            {
              Character RESULT =null;
		 RESULT = ' '; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char",16, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // special_char_tag ::= TAG_LBRACE special_char TAG_RBRACE 
            {
              SpecialCharacterTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new SpecialCharacterTag(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("special_char_tag",15, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // simple_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("simple_directive",59, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // dir_expr ::= PARAMETER_REF 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ParameterRef(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dir_expr ::= NULL_LITERAL 
            {
              Expression RESULT =null;
		 RESULT = new NullLiteralExpression(); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dir_expr ::= literal_value 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		LiteralExpression< ? > e = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr",67, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dir_expr_list ::= dir_expr_list DIRECTIVE_COMMA dir_expr 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dir_expr_list ::= dir_expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<Expression> l = new LinkedList<Expression>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("dir_expr_list",64, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // compound_directive ::= DIRECTIVE_PIPE DIRECTIVE_IDENTIFIER DIRECTIVE_COLON dir_expr_list 
            {
              Directive RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Directive(i, l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("compound_directive",60, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // directive ::= simple_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // directive ::= compound_directive 
            {
              Directive RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive d = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive",58, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // directive_list ::= directive_list directive 
            {
              List<Directive> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // directive_list ::= directive 
            {
              List<Directive> RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Directive dir = (Directive)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Directive> l = new LinkedList<Directive>(); l.add(dir); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("directive_list",57, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // attribute ::= CAPTURED_IDENTIFIER EQ STRING_LITERAL_BEGIN STRING_PARAMETER_REF STRING_LITERAL_END 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new Attribute(name,new ParameterRef(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // attribute ::= CAPTURED_IDENTIFIER EQ string_literal 
            {
              Attribute RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new Attribute(name,new StringLiteralExpression(val)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // attribute_list ::= attribute_list attribute 
            {
              List<Attribute> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> l = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // attribute_list ::= attribute 
            {
              List<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<Attribute> l = new LinkedList<Attribute>(); l.add(att); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("attribute_list",55, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // end_param_tag ::= TAG_END_LBRACE PARAM TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("param"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_param_tag",50, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // begin_param_tag ::= TAG_LBRACE PARAM TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginParamTag(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // begin_param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginParamTag(id,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_param_tag",41, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // param_tag ::= TAG_LBRACE PARAM TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginParamTag(null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // param_tag ::= TAG_LBRACE PARAM PARAMETER_REF COLON expr TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new ContentTagPair(new BeginParamTag(id,e),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-5)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // param_tag ::= begin_param_tag end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // param_tag ::= begin_param_tag content_sequence end_param_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_tag",20, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // param_list ::= param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 LinkedList<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // param_list ::= param_list param_tag 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair p = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(ContentWrapper.create(p)); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // param_list ::= param_list TEMPLATE_TEXT 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("param_list",54, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // end_call_tag ::= TAG_END_LBRACE CALL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("call"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_call_tag",49, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // begin_call_tag ::= TAG_LBRACE CALL TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		 RESULT = new BeginCallTag(null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // begin_call_tag ::= TAG_LBRACE CALL attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // begin_call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_RBRACE 
            {
              BeginCallTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginCallTag(id,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // begin_call_tag ::= begin_call_tag TEMPLATE_TEXT 
            {
              BeginCallTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = b; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_call_tag",42, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // call_tag ::= TAG_LBRACE CALL TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		 RESULT = new TemplateCall(new BeginCallTag(null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER attribute_list TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,att),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // call_tag ::= TAG_LBRACE CALL TEMPLATE_IDENTIFIER TAG_END_RBRACE 
            {
              TemplateCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateCall(new BeginCallTag(id,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // call_tag ::= begin_call_tag end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // call_tag ::= begin_call_tag param_list end_call_tag 
            {
              TemplateCall RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginCallTag b = (BeginCallTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> p = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateCall(b,e,p); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("call_tag",28, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_range ::= IN RANGE LPAREN expr_list RPAREN 
            {
              FunctionCall RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new FunctionCall(new CapturedIdentifier("range"),l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_range",53, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_seq ::= PARAMETER_REF for_range 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		FunctionCall r = (FunctionCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),r.getArgs()); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_seq",52, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // end_for_tag ::= TAG_END_LBRACE FOR TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("for"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_for_tag",48, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // begin_for_tag ::= TAG_LBRACE FOR for_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("for",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_for_tag",40, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_tag ::= TAG_LBRACE FOR TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("for")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_tag ::= begin_for_tag end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_tag ::= begin_for_tag content_sequence end_for_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("for_tag",19, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // foreach_seq ::= PARAMETER_REF IN expr 
            {
              IterableSequence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new IterableSequence(new CapturedIdentifier(p),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_seq",51, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ifempty_tag ::= TAG_LBRACE IF_EMPTY TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("ifempty"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("ifempty_tag",34, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // end_foreach_tag ::= TAG_END_LBRACE FOREACH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("foreach"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_foreach_tag",47, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // begin_foreach_tag ::= TAG_LBRACE FOREACH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginIteratorTag("foreach",null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // begin_foreach_tag ::= TAG_LBRACE FOREACH foreach_seq TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		IterableSequence seq = (IterableSequence)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginIteratorTag("foreach",seq,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_foreach_tag",39, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // foreach_tag ::= TAG_LBRACE FOREACH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("foreach"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // foreach_tag ::= begin_foreach_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // foreach_tag ::= begin_foreach_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // foreach_tag ::= begin_foreach_tag ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // foreach_tag ::= begin_foreach_tag ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(ie).append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l).append(ie),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // foreach_tag ::= begin_foreach_tag content_sequence ifempty_tag content_sequence end_foreach_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).right;
		List<ContentWrapper< ? >> l1 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		UnaryTag ie = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l2 = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(new AlternatePathTagBuffer(b).append(l1).append(ie).append(l2),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("foreach_tag",23, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // default_tag ::= TAG_LBRACE DEFAULT TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("default"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("default_tag",33, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_tag ::= TAG_LBRACE CASE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("case"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_tag ::= TAG_LBRACE CASE expr_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("case",l,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("case_tag",32, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // end_switch_tag ::= TAG_END_LBRACE SWITCH TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("switch"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_switch_tag",46, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // begin_switch_tag ::= TAG_LBRACE SWITCH TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("switch",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // begin_switch_tag ::= TAG_LBRACE SWITCH expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("switch",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_switch_tag",38, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // open_switch_tag ::= begin_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // open_switch_tag ::= begin_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // open_switch_tag ::= open_switch_tag case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // open_switch_tag ::= open_switch_tag content_sequence case_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag c = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_switch_tag",26, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // closing_switch_tag ::= begin_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // closing_switch_tag ::= begin_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // closing_switch_tag ::= open_switch_tag default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // closing_switch_tag ::= open_switch_tag content_sequence default_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag d = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(d); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_switch_tag",27, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_tag ::= TAG_LBRACE SWITCH TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("switch"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_tag ::= TAG_LBRACE SWITCH expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("switch",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switch_tag ::= begin_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch_tag ::= begin_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // switch_tag ::= open_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch_tag ::= open_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // switch_tag ::= closing_switch_tag end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // switch_tag ::= closing_switch_tag content_sequence end_switch_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("switch_tag",22, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // end_if_tag ::= TAG_END_LBRACE IF TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("if"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_if_tag",45, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_tag ::= TAG_LBRACE ELSE TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("else"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_tag",31, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_if_tag ::= TAG_LBRACE ELSE_IF TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		 RESULT = new UnaryTag("elseif"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else_if_tag ::= TAG_LBRACE ELSE_IF expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("elseif",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("else_if_tag",30, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // begin_if_tag ::= TAG_LBRACE IF TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("if",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // begin_if_tag ::= TAG_LBRACE IF expr TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("if",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_if_tag",37, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // open_if_tag ::= begin_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // open_if_tag ::= begin_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // open_if_tag ::= open_if_tag else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // open_if_tag ::= open_if_tag content_sequence else_if_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag elif = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(elif); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("open_if_tag",24, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // closing_if_tag ::= begin_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // closing_if_tag ::= begin_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTagBuffer(b).append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // closing_if_tag ::= open_if_tag else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // closing_if_tag ::= open_if_tag content_sequence else_tag 
            {
              AlternatePathTagBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag el = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = buf.append(l).append(el); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("closing_if_tag",25, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if_tag ::= TAG_LBRACE IF TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		 RESULT = new AlternatePathTag(new UnaryTag("if"),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_tag ::= TAG_LBRACE IF expr TAG_END_RBRACE 
            {
              AlternatePathTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new AlternatePathTag(new UnaryTag("if",e,null,null),null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_tag ::= begin_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_tag ::= begin_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(b,e,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_tag ::= open_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_tag ::= open_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_tag ::= closing_if_tag content_sequence end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf.append(l),e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_tag ::= closing_if_tag end_if_tag 
            {
              AlternatePathTag RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		AlternatePathTagBuffer buf = (AlternatePathTagBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new AlternatePathTag(buf,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("if_tag",21, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // end_msg_tag ::= TAG_END_LBRACE MSG TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("msg"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_msg_tag",44, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // begin_msg_tag ::= TAG_LBRACE MSG TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("msg",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // begin_msg_tag ::= TAG_LBRACE MSG attribute_list TAG_RBRACE 
            {
              BeginTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTag("msg",att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_msg_tag",36, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // msg_tag ::= TAG_LBRACE MSG TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new UnaryTag("msg")); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // msg_tag ::= begin_msg_tag end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // msg_tag ::= begin_msg_tag content_sequence end_msg_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("msg_tag",18, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // print_tag ::= TAG_LBRACE PRINT_IMPLICIT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag(null,e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // print_tag ::= TAG_LBRACE PRINT expr directive_list TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Directive> l = (List<Directive>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // print_tag ::= TAG_LBRACE PRINT expr TAG_RBRACE 
            {
              UnaryTag RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new UnaryTag("print",e,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("print_tag",29, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // end_literal_tag ::= TAG_END_LBRACE LITERAL TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("literal"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_literal_tag",43, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // begin_literal_tag ::= TAG_LBRACE LITERAL TAG_RBRACE 
            {
              BeginTag RESULT =null;
		 RESULT = new BeginTag("literal",null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_literal_tag",35, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal_tag ::= begin_literal_tag LITERAL_TEXT end_literal_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTag b = (BeginTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,ContentWrapper.create(new CapturedText(text))); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("literal_tag",17, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // end_template_tag ::= TAG_END_LBRACE TEMPLATE TAG_RBRACE 
            {
              EndTag RESULT =null;
		 RESULT = new EndTag("template"); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("end_template_tag",12, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(null,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // begin_template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		 RESULT = new BeginTemplateTag(null,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident attribute_list TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<Attribute> att = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,att); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-4)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // begin_template_tag ::= TAG_LBRACE TEMPLATE template_ident TAG_RBRACE 
            {
              BeginTemplateTag RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new BeginTemplateTag(id,null,null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("begin_template_tag",11, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // template_tag ::= TAG_LBRACE TEMPLATE ILLEGAL_TAG_DECLARATION TAG_END_RBRACE 
            {
              ContentTagPair RESULT =null;
		 RESULT = new ContentTagPair(new BeginTemplateTag(null,null,null),null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // template_tag ::= begin_template_tag end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // template_tag ::= begin_template_tag content_sequence end_template_tag 
            {
              ContentTagPair RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		BeginTemplateTag b = (BeginTemplateTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> c = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		EndTag e = (EndTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new ContentTagPair(b,e,c); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_tag",10, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // template_doc_buffer ::= DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 SoyDocCommentBuffer buf = new SoyDocCommentBuffer(); buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_IDENTIFIER 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT_TAG 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // template_doc_buffer ::= template_doc_buffer DOC_COMMENT 
            {
              SoyDocCommentBuffer RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String doc = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 buf.append(doc); RESULT = buf; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_buffer",7, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // template_doc_comment ::= template_doc_buffer DOC_COMMENT_END 
            {
              TemplateDocComment RESULT =null;
		int bufleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int bufright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		SoyDocCommentBuffer buf = (SoyDocCommentBuffer)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new TemplateDocComment(buf); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_doc_comment",6, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // template_def ::= template_tag 
            {
              TemplateDeclaration RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(null,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // template_def ::= template_doc_comment template_tag 
            {
              TemplateDeclaration RESULT =null;
		int docleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int docright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateDocComment doc = (TemplateDocComment)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateDeclaration(doc,tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_def",8, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // namespace_def ::= TAG_LBRACE NAMESPACE RBRACE_ERROR 
            {
              NamespaceDeclaration RESULT =null;
		 RESULT = new NamespaceDeclaration(null); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // namespace_def ::= TAG_LBRACE NAMESPACE NAMESPACE_IDENTIFIER TAG_RBRACE 
            {
              NamespaceDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = new NamespaceDeclaration(id); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("namespace_def",4, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_content_tag ::= special_char_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		SpecialCharacterTag tag = (SpecialCharacterTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // non_content_tag ::= print_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		UnaryTag tag = (UnaryTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("non_content_tag",14, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // content_tag ::= call_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateCall tag = (TemplateCall)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // content_tag ::= for_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // content_tag ::= foreach_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // content_tag ::= switch_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // content_tag ::= if_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		AlternatePathTag tag = (AlternatePathTag)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // content_tag ::= msg_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // content_tag ::= literal_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentTagPair tag = (ContentTagPair)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(tag); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_tag",13, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // content_element ::= non_content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // content_element ::= content_tag 
            {
              ContentWrapper< ? > RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > tag = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = tag; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // content_element ::= COMMENT 
            {
              ContentWrapper< ? > RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new Comment(c)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // content_element ::= TEMPLATE_TEXT 
            {
              ContentWrapper< ? > RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = ContentWrapper.create(new CapturedText(t)); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_element",61, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // content_sequence ::= content_sequence content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<ContentWrapper< ? >> l = (List<ContentWrapper< ? >>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // content_sequence ::= content_element 
            {
              List<ContentWrapper< ? >> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		ContentWrapper< ? > e = (ContentWrapper< ? >)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<ContentWrapper<?>> l = new LinkedList<ContentWrapper<?>>(); l.add(e); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("content_sequence",62, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // skip_element ::= IGNORED_TEXT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // skip_element ::= COMMENT 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element",3, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // skip_element_list ::= skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // skip_element_list ::= skip_element_list skip_element 
            {
              Object RESULT =null;

              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("skip_element_list",2, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // template_list ::= template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 List<TemplateDeclaration> l = new LinkedList<TemplateDeclaration>(); l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // template_list ::= template_list template_def 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		TemplateDeclaration t = (TemplateDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 l.add(t); RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // template_list ::= template_list skip_element 
            {
              List<TemplateDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		 RESULT = l; 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_list",1, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // template_file ::= namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // template_file ::= namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // template_file ::= skip_element_list namespace_def template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= template_file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).right;
		TemplateFile start_val = (TemplateFile)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)).value;
		RESULT = start_val;
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-1)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SoyParser$parser.done_parsing();
          return CUP$SoyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // template_file ::= skip_element_list namespace_def skip_element_list template_list 
            {
              TemplateFile RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).right;
		NamespaceDeclaration n = (NamespaceDeclaration)((java_cup.runtime.Symbol) CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()).right;
		List<TemplateDeclaration> l = (List<TemplateDeclaration>)((java_cup.runtime.Symbol) CUP$SoyParser$stack.peek()).value;
		 RESULT = new TemplateFile(n,l); 
              CUP$SoyParser$result = parser.getSymbolFactory().newSymbol("template_file",0, ((java_cup.runtime.Symbol)CUP$SoyParser$stack.elementAt(CUP$SoyParser$top-3)), ((java_cup.runtime.Symbol)CUP$SoyParser$stack.peek()), RESULT);
            }
          return CUP$SoyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

